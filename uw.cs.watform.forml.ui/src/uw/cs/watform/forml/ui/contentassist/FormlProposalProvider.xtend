/*
 * generated by Xtext
 */
package uw.cs.watform.forml.ui.contentassist

import uw.cs.watform.forml.ui.contentassist.AbstractFormlProposalProvider
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.Assignment
import uw.cs.watform.forml.services.DistanceBasedRanking.DistanceBasedRanking
import org.eclipse.xtext.Keyword
import org.eclipse.jface.text.contentassist.ICompletionProposal

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class FormlProposalProvider extends AbstractFormlProposalProvider {

	override completeWCE_Addobj(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		DistanceBasedRanking.Rank(model, assignment, context, acceptor, this);
		super.completeWCE_Addobj(model, assignment, context, acceptor);
	}

	override completeAtomic_Ref(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		DistanceBasedRanking.Rank(model, assignment, context, acceptor, this);
		super.completeAtomic_Ref(model, assignment, context, acceptor);
	}

	override public  getProposalFactory(String ruleName, ContentAssistContext contentAssistContext) {
		return super.getProposalFactory(ruleName, contentAssistContext);
	}

	override completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext,
		ICompletionProposalAcceptor acceptor) {
		if (keyword.getValue().equals("true") || keyword.getValue().equals("false")) {
			var int prio = DistanceBasedRanking.completeTrueOrFalseKeywords(keyword, contentAssistContext, acceptor);
			if (prio > -1) {
				var ICompletionProposal proposal = createCompletionProposal(keyword.getValue(),
					getKeywordDisplayString(keyword), getImage(keyword), prio, contentAssistContext.getPrefix(),
					contentAssistContext);
				getPriorityHelper().adjustKeywordPriority(proposal, contentAssistContext.getPrefix());
				acceptor.accept(proposal);
				return;
			}
		}
		super.completeKeyword(keyword, contentAssistContext, acceptor);
	}

}
