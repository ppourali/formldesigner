/*
 * generated by Xtext
 */
package uw.cs.watform.forml.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import uw.cs.watform.forml.forml.WCE
import uw.cs.watform.forml.forml.FormlPackage
import org.eclipse.xtext.EcoreUtil2;
import uw.cs.watform.forml.forml.*;
import uw.cs.watform.forml.forml.Feature
import org.eclipse.xtext.scoping.Scopes
import java.util.jar.Attributes
import org.eclipse.xtext.resource.IEObjectDescription
import java.util.List
import java.util.ArrayList
import org.eclipse.xtext.scoping.impl.FilteringScope
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.common.util.BasicEList
import uw.cs.watform.forml.forml.StateContext
import org.eclipse.xtext.scoping.IScope
import uw.cs.watform.forml.forml.Transition
import uw.cs.watform.forml.forml.Guard
import uw.cs.watform.forml.forml.Roleable
import uw.cs.watform.forml.forml.WorldModel
import uw.cs.watform.forml.forml.Association
import org.eclipse.emf.ecore.util.EcoreUtil
import uw.cs.watform.forml.forml.System
import org.eclipse.xtext.util.SimpleAttributeResolver
import org.eclipse.xtext.scoping.impl.SimpleScope
import uw.cs.watform.forml.forml.ExprRef
import uw.cs.watform.forml.forml.Function
import uw.cs.watform.forml.forml.Input
import uw.cs.watform.forml.forml.Attribute
import uw.cs.watform.forml.forml.Output
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.nodemodel.INode
import org.eclipse.xtext.nodemodel.util.NodeModelUtils
import uw.cs.watform.forml.forml.EnumConst
import uw.cs.watform.forml.forml.ReferenceType
import uw.cs.watform.forml.forml.Enumeration
import uw.cs.watform.forml.forml.AttributeType
import uw.cs.watform.forml.forml.intBase
import uw.cs.watform.forml.forml.impl.impPredImpl

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 */
class FormlScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {

	List<Roleable> featureElement = new BasicEList();
	List<Roleable> parentFeatureElement = new BasicEList();
	List<Roleable> associatedFeatureElement = new BasicEList();

	override getScope(EObject context, EReference reference) {

		// java.lang.System.out.println(context);
		// java.lang.System.out.println(reference);
		if (context instanceof Trigger) {
			// if (reference == FormlPackage.Literals.WCE__ATTR) {
			// return scopeForEvent_Attribute(context, reference);
			// } else if (reference == FormlPackage.Literals.WCE__ADDOBJ ||
			// reference == FormlPackage.Literals.WCE__REMOBJ) {
			return scopeForEvent_Add_Rem_Object(context, reference);
		/* } else if (context instanceof intBase) {
		 * 	if (reference == FormlPackage.Literals.ATOMIC__REF) {
		 * 		if (reference.eContainer == FormlPackage.Literals.ATOMIC) {
		 * 			// java.lang.System.out.println(reference);
		 * 			val guardElement = EcoreUtil2.getContainerOfType(context, Guard);
		 * 			if (guardElement !== null) {
		 * 				return scopeForIntBaseGuard(context, reference, guardElement);
		 * 			}
		 * 		}
		 * 	}
		 */
		} else {
			val guardElement = EcoreUtil2.getContainerOfType(context, Guard);
			// java.lang.System.out.println(reference);
//			java.lang.System.out.println(FormlPackage.Literals.ATOMIC__REF);
//			java.lang.System.out.println(reference.eContainer);
//			java.lang.System.out.println(FormlPackage.Literals.ATOMIC);
			if (reference == FormlPackage.Literals.ATOMIC__REF) {
				if (reference.eContainer == FormlPackage.Literals.ATOMIC) {
					// java.lang.System.out.println(reference);
					// java.lang.System.out.println(reference.eContainer);
					if (guardElement !== null)
						return scopeForTypedGuard(context, reference, guardElement);
				}
			} else if (reference == FormlPackage.Literals.ATOMIC__REFS) {
				if (reference.eContainer == FormlPackage.Literals.ATOMIC) {
					// java.lang.System.out.println(reference);
					// java.lang.System.out.println(reference.eContainer);
					if (guardElement !== null)
						return scopeForTypedGuard(context, reference, guardElement);
				}
			} else if (reference == FormlPackage.Literals.UNSPECIFIED__REF) {
				if (reference.eContainer == FormlPackage.Literals.UNSPECIFIED) {
					// java.lang.System.out.println(reference);
					// java.lang.System.out.println(reference.eContainer);
					if (guardElement !== null)
						return scopeForTypedGuard(context, reference, guardElement);
				}
			}

//			if (context instanceof Guard) {
//				// var count = EcoreUtil2.getAllContentsOfType(guardElement, atomic).size;
//				// java.lang.System.out.println(count);
//				var count = EcoreUtil2.getAllContentsOfType(guardElement, atomic).size;
//				if (count === 1 || count === 2) {
//					return scopeForTypedGuard(context, reference, guardElement);
//				} else {
//					return scopeForGuard(context, reference);
//				}
//			} else if (context instanceof Transition) {
//				if (reference.containerClass == atomic || reference.containerClass == unspecified) {
//					return scopeForGuard(context, reference);
//				}
//			} else {
//				if (guardElement !== null) {
//					if (context instanceof basePred) {
//						var count = EcoreUtil2.getAllContentsOfType(guardElement, atomic).size;
//						if (count === 1 || count === 2) {
//							return scopeForTypedGuard(context, reference, guardElement);
//						} else {
//							return scopeForGuard(context, reference);
//						}
//					} else {
//						return scopeForGuard(context, reference);
//					}
//				}
//			}
		}

		// java.lang.System.out.println(super.getScope(context, reference).allElements);
		return super.getScope(context, reference);
	}

	def scopeForTypedGuard(EObject context, EReference reference, Guard guardElement) {

		val rootElement = EcoreUtil2.getContainerOfType(context, FeatureModule);

		featureElement.add(FeatureModule.cast(rootElement).featureref);
		parentFeatureElement.addAll(getParentOriginalFeatureModules(rootElement));
		parentFeatureElement.add(getGeneralizedEntities(FeatureModule.cast(rootElement).featureref));
		associatedFeatureElement.addAll(getAssociatedEntities(featureElement));

		var List<EObject> candidates = new BasicEList();
		var List<Roleable> alreadyCheckedFeatures = new BasicEList();
		candidates.addAll(getPossibleMessages(featureElement, alreadyCheckedFeatures));

		alreadyCheckedFeatures.addAll(featureElement);
		candidates.addAll(getPossibleMessages(parentFeatureElement, alreadyCheckedFeatures));

		alreadyCheckedFeatures.addAll(parentFeatureElement);
		candidates.addAll(getPossibleMessages(associatedFeatureElement, alreadyCheckedFeatures));

		if (isIntExpression(guardElement)) {
			return intGuardScoping(candidates, context, reference, guardElement);
		} else {
			return generalGuardScoping(candidates, context, reference, guardElement);
		}

// return super.getScope(context, reference);
	}

	def intGuardScoping(List<EObject> candidates, EObject context, EReference reference, Guard guardElement) {

		val List<EObject> filteredElements = new ArrayList<EObject>();
		for (IEObjectDescription scopeElement : context.delegateGetScope(reference).allElements) {
			if (scopeElement.EObjectOrProxy instanceof ExprRef) {

				if (scopeElement.EObjectOrProxy instanceof EnumConst) {
					// if (checkAndFilter(EnumConst.cast(scopeElement.EObjectOrProxy), otherSideType)) {
					// filteredElements.add(scopeElement.EObjectOrProxy);
					// }
				} else {
					if (!candidates.contains(scopeElement.EObjectOrProxy)) {
						// java.lang.System.err.println(scopeElement.EObjectOrProxy);
						filteredElements.add(scopeElement.EObjectOrProxy);
					} else {
						if (!(IntType.isInstance(getTypeOf(ExprRef.cast(scopeElement.EObjectOrProxy))))) {
//							java.lang.System.out.println(
//									getTypeOf(ExprRef.cast(scopeElement.EObjectOrProxy)) + "::   " +
//										scopeElement.EObjectOrProxy + "::   " + otherSideType);
							filteredElements.add(scopeElement.EObjectOrProxy);
						}
					}
				}
			}
		}

		return new FilteringScope(context.delegateGetScope(reference), [
			!filteredElements.contains(getEObjectOrProxy)
		])
	}

	def generalGuardScoping(List<EObject> candidates, EObject context, EReference reference, Guard guardElement) {
		var List<atomic> atomics = new BasicEList();
		atomics.addAll(EcoreUtil2.getAllContentsOfType(context, atomic));
		var AttributeType otherSideType = null;

		val count = atomics.size;

		try {
			if (count == 0 && context.equals(guardElement)) {
			} // [ someElement== (|) ]
			else if (count === 1) {
				if (!atomics.get(0).ref.eIsProxy) {
					otherSideType = getTypeOf(atomics.get(0).ref);
				}
			} // [ (someElement) == someElement]
			if (count == 2 && context.equals(guardElement)) {
				if (!atomics.get(1).ref.eIsProxy) {
					otherSideType = getTypeOf(atomics.get(1).ref);
				}

			} // [ someElement == (someElement)]
			else if (count === 2) {
				if (!atomics.get(0).ref.eIsProxy) {
					otherSideType = getTypeOf(atomics.get(0).ref);
				}
			}
		} catch (Exception e) {
		}

		val List<EObject> filteredElements = new ArrayList<EObject>();
		for (IEObjectDescription scopeElement : context.delegateGetScope(reference).allElements) {
			if (scopeElement.EObjectOrProxy instanceof ExprRef) {

				if (scopeElement.EObjectOrProxy instanceof EnumConst) {
					// if (checkAndFilter(EnumConst.cast(scopeElement.EObjectOrProxy), otherSideType)) {
					// filteredElements.add(scopeElement.EObjectOrProxy);
					// }
				} else {
					if (!candidates.contains(scopeElement.EObjectOrProxy)) {
						// java.lang.System.err.println(scopeElement.EObjectOrProxy);
						filteredElements.add(scopeElement.EObjectOrProxy);
					} else {
						if (!isTypesMatch(otherSideType, getTypeOf(ExprRef.cast(scopeElement.EObjectOrProxy)))) {
//							java.lang.System.out.println(
//									getTypeOf(ExprRef.cast(scopeElement.EObjectOrProxy)) + "::   " +
//										scopeElement.EObjectOrProxy + "::   " + otherSideType);
							filteredElements.add(scopeElement.EObjectOrProxy);
						}
					}
				}
			}
		}

		return new FilteringScope(context.delegateGetScope(reference), [
			!filteredElements.contains(getEObjectOrProxy)
		])
	}

	def isIntExpression(Guard guard) {
		var List<impPred> imppred = EcoreUtil2.getAllContentsOfType(guard, impPred);

		if (imppred.size != 1)
			return false;

		var List<intBase> intbase = EcoreUtil2.getAllContentsOfType(guard, intBase);
		if (intbase.isEmpty) {
			return false;
		} else {
			return true;
		}
	}

	def boolean checkAndFilter(EnumConst enumconst, AttributeType LHSType) {

		if (LHSType !== null) {
			if (LHSType instanceof ReferenceType) {
				if ((ReferenceType.cast(LHSType)).getRef() instanceof Enumeration) {
					var Enumeration enumClass = Enumeration.cast(ReferenceType.cast(LHSType).getRef());
					if (enumClass !== null && enumClass == getEnumClass(enumconst)) {
						return false;
					}
				}
			}

		}
		return true;
	}

	def getEnumClass(EnumConst enumconst) {
		var Enumeration enumClass = EcoreUtil2.getContainerOfType(enumconst, Enumeration);
		return enumClass;
	}

	def boolean isTypesMatch(AttributeType type1, AttributeType type2) {
		if (type1 !== null && type2 !== null) {
			if (type1 instanceof IntType && type2 instanceof IntType) {
				return true;
			}
			if (type1 instanceof BoolType && type2 instanceof BoolType) {
				return true;
			}
			if (type1 instanceof StringType && type2 instanceof StringType) {
				return true;
			}
			if (type1 instanceof Enumeration && type2 instanceof Enumeration) {
				if (Enumeration.cast(type1).name.equalsIgnoreCase(Enumeration.cast(type2).name))
					return true;
			}
			if (type1 instanceof ReferenceType && type2 instanceof ReferenceType) {
				if (ReferenceType.cast(type1).ref.name.equalsIgnoreCase(ReferenceType.cast(type2).ref.name))
					return true;
			}

			if (type1 instanceof UndefinedType && type2 instanceof UndefinedType) {
				return true;
			}
		} else if (type1 === null || type2 === null)
			return true;

		return false;
	}

	def AttributeType getTypeOf(ExprRef ref) {
		if (ref instanceof Input) {
			return Input.cast(ref).type;
		} else if (ref instanceof Output) {
			return Output.cast(ref).type;
		} else if (ref instanceof Attribute) {
			return Attribute.cast(ref).type;
		} else if (ref instanceof Function) {
			return Function.cast(ref).type;
		}
		return null;
	}

	def scopeForGuard(EObject context, EReference reference) {
		val rootElement = EcoreUtil2.getContainerOfType(context, FeatureModule);

		featureElement.add(FeatureModule.cast(rootElement).featureref);
		parentFeatureElement.addAll(getParentOriginalFeatureModules(rootElement));
		parentFeatureElement.add(getGeneralizedEntities(FeatureModule.cast(rootElement).featureref));
		associatedFeatureElement.addAll(getAssociatedEntities(featureElement));

		var List<EObject> candidates = new BasicEList();
		var List<Roleable> alreadyCheckedFeatures = new BasicEList();
		candidates.addAll(getPossibleMessages(featureElement, alreadyCheckedFeatures));

		alreadyCheckedFeatures.addAll(featureElement);
		candidates.addAll(getPossibleMessages(parentFeatureElement, alreadyCheckedFeatures));

		alreadyCheckedFeatures.addAll(parentFeatureElement);
		candidates.addAll(getPossibleMessages(associatedFeatureElement, alreadyCheckedFeatures));

		val List<EObject> filteredElements = new ArrayList<EObject>();
		for (IEObjectDescription scopeElement : context.delegateGetScope(reference).allElements) {
			if (scopeElement.EObjectOrProxy instanceof ExprRef) {
				if (scopeElement.EObjectOrProxy instanceof EnumConst) {
					// do not filterout enum constants
				} else {
					if (!candidates.contains(scopeElement.EObjectOrProxy)) {
						filteredElements.add(scopeElement.EObjectOrProxy);
					}
				}
			}
		}

		return new FilteringScope(context.delegateGetScope(reference), [
			!filteredElements.contains(getEObjectOrProxy)
		])
//		// if (reference == FormlPackage.Literals.ATOMIC__REF) {
//		// FILTERING OUT THE enums class (not enum items)
//		val List<EObject> filteredElements = new ArrayList<EObject>();
//
//		for (IEObjectDescription scopeElement : context.delegateGetScope(reference).allElements) {
//			if (scopeElement.EObjectOrProxy instanceof Enumeration) {
//				filteredElements.add(scopeElement.EObjectOrProxy);
//			}
//		}
//
//		// java.lang.System.out.println(filteredElements);
//		return new FilteringScope(context.delegateGetScope(reference), [
//			!filteredElements.contains(getEObjectOrProxy)
//		])
//// }
	}

// FILTERING OUT MESSAGE THAT ARE NOT PART OF THE FEATURE AND ASSOCIATED ENTITIES 
	def scopeForEvent_Add_Rem_Object(Trigger context, EReference reference) {
		val rootElement = EcoreUtil2.getContainerOfType(context, FeatureModule);

		featureElement.add(FeatureModule.cast(rootElement).featureref);
		parentFeatureElement.addAll(getParentOriginalFeatureModules(rootElement));
		parentFeatureElement.add(getGeneralizedEntities(FeatureModule.cast(rootElement).featureref));
		associatedFeatureElement.addAll(getAssociatedEntities(featureElement));

		var List<EObject> candidates = new BasicEList();
		var List<Roleable> alreadyCheckedFeatures = new BasicEList();
		candidates.addAll(getPossibleMessages(featureElement, alreadyCheckedFeatures));

		alreadyCheckedFeatures.addAll(featureElement);
		candidates.addAll(getPossibleMessages(parentFeatureElement, alreadyCheckedFeatures));

		alreadyCheckedFeatures.addAll(parentFeatureElement);
		candidates.addAll(getPossibleMessages(associatedFeatureElement, alreadyCheckedFeatures));

		val List<EObject> filteredElements = new ArrayList<EObject>();
		for (IEObjectDescription scopeElement : context.delegateGetScope(reference).allElements) {
			if (scopeElement.EObjectOrProxy instanceof ExprRef) {
				if (scopeElement.EObjectOrProxy instanceof EnumConst) {
					// do not filterout enum constants
				} else {
					if (!candidates.contains(scopeElement.EObjectOrProxy)) {
						filteredElements.add(scopeElement.EObjectOrProxy);
					}
				}
			}
		}

		return new FilteringScope(context.delegateGetScope(reference), [
			!filteredElements.contains(getEObjectOrProxy)
		])
// return new SimpleScope(delegateGetScope(context, reference), Scopes.scopedElementsFor(candidates), true)
// return Scopes.scopeFor(candidates);
	}

	def List<EObject> getPossibleMessages(List<Roleable> roleableElements, List<Roleable> alreadyCheckedFeatures) {
		var List<EObject> candidates = new BasicEList();
		var List<Roleable> indirectAssociationList = new BasicEList();

		if (roleableElements.isEmpty)
			return candidates;

		for (Roleable roleable : roleableElements) {
			if (alreadyCheckedFeatures.contains(roleable)) {
			} else {
				if (roleable !== null) {
					for (att : roleable.attributes) {
						candidates.add(att);
					}

					if (roleable instanceof Feature) {
						if (Feature.cast(roleable).inputlist !== null) {
							for (Msg : (Feature.cast(roleable)).inputlist.inputs) {
								candidates.add(Msg.refMsg);
							}
						}
						if (Feature.cast(roleable).outputlist !== null) {
							for (Msg : (Feature.cast(roleable)).outputlist.outputs) {
								candidates.add(Msg.refMsg);
							}
						}
					} else if (roleable instanceof Entity) {
						for (Msg : (Entity.cast(roleable)).functions) {
							candidates.add(Msg);
						}
					}
				}
				// java.lang.System.out.println(roleable);
				alreadyCheckedFeatures.add(roleable);

				// indirectAssociationList.add(roleable);
				var List<Roleable> associatedElements = new BasicEList();
				// for (assoc : indirectAssociationList) {
				var List<Roleable> assocList = new BasicEList();
				assocList.add(roleable);
				associatedElements.addAll(getAssociatedEntities(assocList));
				associatedElements.addAll(getGeneralizedEntities(roleable));

				// }
				candidates.addAll(getPossibleMessages(associatedElements, alreadyCheckedFeatures));
			}
		}

		return candidates;
	}

//	def scopeForEvent_Attribute(Trigger context, EReference reference) {
//		val rootElement = EcoreUtil2.getContainerOfType(context, FeatureModule);
//
//		// SELECTING ONLY THE MESSAGES THAT ARE PART OF THE FEATURE 
//		featureElement.add(FeatureModule.cast(rootElement).featureref);
//		parentFeatureElement.addAll(getParentOriginalFeatureModules(rootElement));
//		associatedFeatureElement.addAll(getAssociatedEntities(featureElement));
//
////				// list of associated entities with the feature
////				val List<EObject> associatedEntities = new ArrayList<EObject>();
////				val systemElement = EcoreUtil2.getRootContainer(featureElement);
////				for (Association assoc : EcoreUtil2.getAllContentsOfType(systemElement, Association)) {
////					if (assoc.srcRole.type.equals(featureElement))
////						associatedEntities.add(assoc.desRole.type)
////
////					if (assoc.desRole.type.equals(featureElement))
////						associatedEntities.add(assoc.srcRole.type)
////				}
//		// val candidates=getScope(context,reference).allElements
//		// FILTERING OUT THE ATTRIBUTES THAT ARE NOT PART OF THE FEATURE and ASSOCIATED ENTITIES
//		val List<EObject> filteredElements = new ArrayList<EObject>();
//
//		for (IEObjectDescription scopeElement : context.delegateGetScope(reference).allElements) {
//			if (scopeElement.EObjectOrProxy instanceof Attribute) {
//				if (scopeElement.EObjectOrProxy.eContainer instanceof Feature) {
//					if (!scopeElement.EObjectOrProxy.eContainer.equals(featureElement)) {
//						filteredElements.add(scopeElement.EObjectOrProxy);
//					}
//				}
//				/* 
//				 * // FILTERING OUT THE ATTRIBUTES THAT ARE NOT WTIH ASSOCIATED ENTITIES OF THE FEATURE
//				 * else if (scopeElement.EObjectOrProxy.eContainer instanceof Entity) {
//
//				 * 	if (! associatedEntities.contains(scopeElement.EObjectOrProxy.eContainer)) {
//				 * 		filteredElements.add(scopeElement.EObjectOrProxy);
//				 * 	}
//				 * }
//				 */
//				else if (scopeElement.EObjectOrProxy.eContainer instanceof Message) {
//					{
//						if (scopeElement.EObjectOrProxy.eContainer instanceof Input) {
//							if (! Input.cast(scopeElement.EObjectOrProxy.eContainer).tos.contains(featureElement)) {
//								filteredElements.add(scopeElement.EObjectOrProxy);
//							}
//						} else if (scopeElement.EObjectOrProxy.eContainer instanceof Output) {
//
//							// if (! Output.cast(scopeElement.EObjectOrProxy.eContainer).froms.contains(featureElement)) {
//							// FILTER OUT ALL THE OUTPUT MESSAGES VARIABLES, NO MATTER WHICH FEATURE
//							filteredElements.add(scopeElement.EObjectOrProxy);
//						// }
//						}
//
//					}
//				}
//			}
//		}
//
//		return new FilteringScope(context.delegateGetScope(reference), [
//			!filteredElements.contains(getEObjectOrProxy)
//		])
//	}
	def getAssociatedEntities(List<Roleable> currentRolables) {

		val Roleable currentFeature = currentRolables.get(0);

		var List<Roleable> associatedEntities = new BasicEList();
		// TODO null pointer
		if (currentFeature != null) {

			val WorldModel wm = (System.cast(EcoreUtil.getRootContainer(currentFeature))).worldmodel;

			if (wm !== null && currentFeature !== null) {
				for (assoc : EcoreUtil2.getAllContentsOfType(wm, Association)) {
					if (assoc.getSrcRole().getType().equals(currentFeature))
						associatedEntities.add(assoc.getDesRole().getType());

					if (assoc.getDesRole().getType().equals(currentFeature))
						associatedEntities.add(assoc.getSrcRole().getType());
				}
				for (aggr : EcoreUtil2.getAllContentsOfType(wm, Aggregation)) {
					if (aggr.part.getType().equals(currentFeature))
						associatedEntities.add(aggr.whole.getType());

					if (aggr.whole.getType().equals(currentFeature))
						associatedEntities.add(aggr.part.getType());
				}
				for (comp : EcoreUtil2.getAllContentsOfType(wm, Composition)) {
					if (comp.part.getType().equals(currentFeature))
						associatedEntities.add(comp.whole.getType());

					if (comp.whole.getType().equals(currentFeature))
						associatedEntities.add(comp.part.getType());
				}
				associatedEntities.remove(currentFeature);
			}
		}
		return associatedEntities;

	}

	def List<Roleable> getParentOriginalFeatureModules(FeatureModule fm) {

		var List<Roleable> result = new BasicEList();

		var FeatureModule featuremodule = fm;
		while (featuremodule != null) {
			var List<StateContext> allStateContexts = EcoreUtil2.getAllContentsOfType(featuremodule, StateContext);
			if (allStateContexts.size == 0)
				featuremodule = null;

			for (StateContext sc : allStateContexts) {
				featuremodule = EcoreUtil2.getContainerOfType(sc.ref, FeatureModule);
				result.add(featuremodule.featureref);
			}
		}

		return result;

	}

	def Roleable getGeneralizedEntities(Roleable roleable) {
		if (roleable !== null) {
			if (Entity.isInstance(roleable)) {
				if (Entity.cast(roleable).superType !== null) {
					return Entity.cast(roleable).superType;
				}
			}
		}
	}
}
