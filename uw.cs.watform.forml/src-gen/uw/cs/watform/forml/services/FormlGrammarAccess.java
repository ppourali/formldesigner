/*
 * generated by Xtext
 */
package uw.cs.watform.forml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FormlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cWorldmodelAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cWorldmodelWorldModelParserRuleCall_1_0_0 = (RuleCall)cWorldmodelAssignment_1_0.eContents().get(0);
		private final Assignment cBehaviourmodelAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cBehaviourmodelBehaviourModelParserRuleCall_1_1_0 = (RuleCall)cBehaviourmodelAssignment_1_1.eContents().get(0);
		
		//// Add ctrl for entity, composition, aggregation, attribute, and association
		//System:
		//	{System} (worldmodel=WorldModel? & behaviourmodel=BehaviourModel?);
		@Override public ParserRule getRule() { return rule; }

		//{System} (worldmodel=WorldModel? & behaviourmodel=BehaviourModel?)
		public Group getGroup() { return cGroup; }

		//{System}
		public Action getSystemAction_0() { return cSystemAction_0; }

		//worldmodel=WorldModel? & behaviourmodel=BehaviourModel?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//worldmodel=WorldModel?
		public Assignment getWorldmodelAssignment_1_0() { return cWorldmodelAssignment_1_0; }

		//WorldModel
		public RuleCall getWorldmodelWorldModelParserRuleCall_1_0_0() { return cWorldmodelWorldModelParserRuleCall_1_0_0; }

		//behaviourmodel=BehaviourModel?
		public Assignment getBehaviourmodelAssignment_1_1() { return cBehaviourmodelAssignment_1_1; }

		//BehaviourModel
		public RuleCall getBehaviourmodelBehaviourModelParserRuleCall_1_1_0() { return cBehaviourmodelBehaviourModelParserRuleCall_1_1_0; }
	}

	public class WorldModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.WorldModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWorldModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWorldKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cConceptsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cConceptsConceptParserRuleCall_1_2_0_0 = (RuleCall)cConceptsAssignment_1_2_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cConstraintsConstraintParserRuleCall_1_2_1_0 = (RuleCall)cConstraintsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		///**
		// * World Model
		// */ WorldModel:
		//	{WorldModel} ('World' '{' (concepts+=Concept*
		//	constraints=Constraint?)
		//	'}');
		@Override public ParserRule getRule() { return rule; }

		//{WorldModel} ('World' '{' (concepts+=Concept* constraints=Constraint?) '}')
		public Group getGroup() { return cGroup; }

		//{WorldModel}
		public Action getWorldModelAction_0() { return cWorldModelAction_0; }

		//'World' '{' (concepts+=Concept* constraints=Constraint?) '}'
		public Group getGroup_1() { return cGroup_1; }

		//'World'
		public Keyword getWorldKeyword_1_0() { return cWorldKeyword_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//concepts+=Concept* constraints=Constraint?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//concepts+=Concept*
		public Assignment getConceptsAssignment_1_2_0() { return cConceptsAssignment_1_2_0; }

		//Concept
		public RuleCall getConceptsConceptParserRuleCall_1_2_0_0() { return cConceptsConceptParserRuleCall_1_2_0_0; }

		//constraints=Constraint?
		public Assignment getConstraintsAssignment_1_2_1() { return cConstraintsAssignment_1_2_1; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_1_2_1_0() { return cConstraintsConstraintParserRuleCall_1_2_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstraintsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cPredicatesAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cPredicatesPredicateParserRuleCall_3_0_0 = (RuleCall)cPredicatesAssignment_3_0.eContents().get(0);
		private final Assignment cMacroAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cMacroMacroParserRuleCall_3_1_0 = (RuleCall)cMacroAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Constraint:
		//	{Constraint} 'Constraints' '{' (predicates+=Predicate* & macro+=Macro*) '}';
		@Override public ParserRule getRule() { return rule; }

		//{Constraint} 'Constraints' '{' (predicates+=Predicate* & macro+=Macro*) '}'
		public Group getGroup() { return cGroup; }

		//{Constraint}
		public Action getConstraintAction_0() { return cConstraintAction_0; }

		//'Constraints'
		public Keyword getConstraintsKeyword_1() { return cConstraintsKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//predicates+=Predicate* & macro+=Macro*
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//predicates+=Predicate*
		public Assignment getPredicatesAssignment_3_0() { return cPredicatesAssignment_3_0; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_3_0_0() { return cPredicatesPredicateParserRuleCall_3_0_0; }

		//macro+=Macro*
		public Assignment getMacroAssignment_3_1() { return cMacroAssignment_3_1; }

		//Macro
		public RuleCall getMacroMacroParserRuleCall_3_1_0() { return cMacroMacroParserRuleCall_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ExprRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.ExprRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConceptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprRef:
		//	Concept | Attribute;
		@Override public ParserRule getRule() { return rule; }

		//Concept | Attribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//Concept
		public RuleCall getConceptParserRuleCall_0() { return cConceptParserRuleCall_0; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_1() { return cAttributeParserRuleCall_1; }
	}

	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Concept");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSPLParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMessageParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFeatureParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnumerationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUndefinedTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Concept ExprRef:
		//	Entity | Relationship | SPL | Message | Feature | Enumeration | UndefinedType;
		@Override public ParserRule getRule() { return rule; }

		//Entity | Relationship | SPL | Message | Feature | Enumeration | UndefinedType
		public Alternatives getAlternatives() { return cAlternatives; }

		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }

		//Relationship
		public RuleCall getRelationshipParserRuleCall_1() { return cRelationshipParserRuleCall_1; }

		//SPL
		public RuleCall getSPLParserRuleCall_2() { return cSPLParserRuleCall_2; }

		//Message
		public RuleCall getMessageParserRuleCall_3() { return cMessageParserRuleCall_3; }

		//Feature
		public RuleCall getFeatureParserRuleCall_4() { return cFeatureParserRuleCall_4; }

		//Enumeration
		public RuleCall getEnumerationParserRuleCall_5() { return cEnumerationParserRuleCall_5; }

		////is enum a concept or its constants are concept ?!
		//UndefinedType
		public RuleCall getUndefinedTypeParserRuleCall_6() { return cUndefinedTypeParserRuleCall_6; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Relationship");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssociationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAggregationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Relationship Concept:
		//	Association | Aggregation | Composition;
		@Override public ParserRule getRule() { return rule; }

		//Association | Aggregation | Composition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Association
		public RuleCall getAssociationParserRuleCall_0() { return cAssociationParserRuleCall_0; }

		//Aggregation
		public RuleCall getAggregationParserRuleCall_1() { return cAggregationParserRuleCall_1; }

		//Composition
		public RuleCall getCompositionParserRuleCall_2() { return cCompositionParserRuleCall_2; }
	}

	public class RoleableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Roleable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Roleable Concept:
		//	Entity | Feature;
		@Override public ParserRule getRule() { return rule; }

		//Entity | Feature
		public Alternatives getAlternatives() { return cAlternatives; }

		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }

		//Feature
		public RuleCall getFeatureParserRuleCall_1() { return cFeatureParserRuleCall_1; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAbstractKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCtrlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cCtrlCtrlKeyword_2_0 = (Keyword)cCtrlAssignment_2.eContents().get(0);
		private final Keyword cEntityKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSuperTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSuperTypeEntityCrossReference_5_1_0 = (CrossReference)cSuperTypeAssignment_5_1.eContents().get(0);
		private final RuleCall cSuperTypeEntityIDTerminalRuleCall_5_1_0_1 = (RuleCall)cSuperTypeEntityCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cAttributesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_6_1_0 = (RuleCall)cAttributesAssignment_6_1.eContents().get(0);
		private final Assignment cFunctionsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cFunctionsFunctionParserRuleCall_6_2_0 = (RuleCall)cFunctionsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//Entity Roleable:
		//	{Entity} 'abstract'? ctrl?='ctrl'? 'entity' name=ID ('extends' superType=[Entity])? ('{' attributes+=Attribute*
		//	functions+=Function* '}')?;
		@Override public ParserRule getRule() { return rule; }

		//{Entity} 'abstract'? ctrl?='ctrl'? 'entity' name=ID ('extends' superType=[Entity])? ('{' attributes+=Attribute*
		//functions+=Function* '}')?
		public Group getGroup() { return cGroup; }

		//{Entity}
		public Action getEntityAction_0() { return cEntityAction_0; }

		//'abstract'?
		public Keyword getAbstractKeyword_1() { return cAbstractKeyword_1; }

		//ctrl?='ctrl'?
		public Assignment getCtrlAssignment_2() { return cCtrlAssignment_2; }

		//'ctrl'
		public Keyword getCtrlCtrlKeyword_2_0() { return cCtrlCtrlKeyword_2_0; }

		//'entity'
		public Keyword getEntityKeyword_3() { return cEntityKeyword_3; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//('extends' superType=[Entity])?
		public Group getGroup_5() { return cGroup_5; }

		//'extends'
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }

		//superType=[Entity]
		public Assignment getSuperTypeAssignment_5_1() { return cSuperTypeAssignment_5_1; }

		//[Entity]
		public CrossReference getSuperTypeEntityCrossReference_5_1_0() { return cSuperTypeEntityCrossReference_5_1_0; }

		//ID
		public RuleCall getSuperTypeEntityIDTerminalRuleCall_5_1_0_1() { return cSuperTypeEntityIDTerminalRuleCall_5_1_0_1; }

		//('{' attributes+=Attribute* functions+=Function* '}')?
		public Group getGroup_6() { return cGroup_6; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_6_1() { return cAttributesAssignment_6_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_6_1_0() { return cAttributesAttributeParserRuleCall_6_1_0; }

		//functions+=Function*
		public Assignment getFunctionsAssignment_6_2() { return cFunctionsAssignment_6_2; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_6_2_0() { return cFunctionsFunctionParserRuleCall_6_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
	}

	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssociationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCtrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCtrlCtrlKeyword_1_0 = (Keyword)cCtrlAssignment_1.eContents().get(0);
		private final Keyword cAssociationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Assignment cAttributesAssignment_5_0 = (Assignment)cUnorderedGroup_5.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0_0 = (RuleCall)cAttributesAssignment_5_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5_1 = (UnorderedGroup)cUnorderedGroup_5.eContents().get(1);
		private final Assignment cSrcRoleAssignment_5_1_0 = (Assignment)cUnorderedGroup_5_1.eContents().get(0);
		private final RuleCall cSrcRoleRoleParserRuleCall_5_1_0_0 = (RuleCall)cSrcRoleAssignment_5_1_0.eContents().get(0);
		private final Assignment cDesRoleAssignment_5_1_1 = (Assignment)cUnorderedGroup_5_1.eContents().get(1);
		private final RuleCall cDesRoleRoleParserRuleCall_5_1_1_0 = (RuleCall)cDesRoleAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Association Relationship:
		//	{Association} ctrl?='ctrl'? 'association' name=ID '{' (attributes+=Attribute* & (srcRole=Role & desRole=Role)) '}';
		@Override public ParserRule getRule() { return rule; }

		//{Association} ctrl?='ctrl'? 'association' name=ID '{' (attributes+=Attribute* & (srcRole=Role & desRole=Role)) '}'
		public Group getGroup() { return cGroup; }

		//{Association}
		public Action getAssociationAction_0() { return cAssociationAction_0; }

		//ctrl?='ctrl'?
		public Assignment getCtrlAssignment_1() { return cCtrlAssignment_1; }

		//'ctrl'
		public Keyword getCtrlCtrlKeyword_1_0() { return cCtrlCtrlKeyword_1_0; }

		//'association'
		public Keyword getAssociationKeyword_2() { return cAssociationKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//attributes+=Attribute* & (srcRole=Role & desRole=Role)
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5_0() { return cAttributesAssignment_5_0; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0_0() { return cAttributesAttributeParserRuleCall_5_0_0; }

		//(srcRole=Role & desRole=Role)
		public UnorderedGroup getUnorderedGroup_5_1() { return cUnorderedGroup_5_1; }

		//srcRole=Role
		public Assignment getSrcRoleAssignment_5_1_0() { return cSrcRoleAssignment_5_1_0; }

		//Role
		public RuleCall getSrcRoleRoleParserRuleCall_5_1_0_0() { return cSrcRoleRoleParserRuleCall_5_1_0_0; }

		//desRole=Role
		public Assignment getDesRoleAssignment_5_1_1() { return cDesRoleAssignment_5_1_1; }

		//Role
		public RuleCall getDesRoleRoleParserRuleCall_5_1_1_0() { return cDesRoleRoleParserRuleCall_5_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCtrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCtrlCtrlKeyword_1_0 = (Keyword)cCtrlAssignment_1.eContents().get(0);
		private final Keyword cAttributeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMultiplicityAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_4_1_0 = (RuleCall)cMultiplicityAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeAttributeTypeParserRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		
		//Attribute ExprRef:
		//	{Attribute} ctrl?='ctrl'? 'attribute' name=ID ('[' multiplicity=Multiplicity ']')? ':' type=AttributeType?;
		@Override public ParserRule getRule() { return rule; }

		//{Attribute} ctrl?='ctrl'? 'attribute' name=ID ('[' multiplicity=Multiplicity ']')? ':' type=AttributeType?
		public Group getGroup() { return cGroup; }

		//{Attribute}
		public Action getAttributeAction_0() { return cAttributeAction_0; }

		//ctrl?='ctrl'?
		public Assignment getCtrlAssignment_1() { return cCtrlAssignment_1; }

		//'ctrl'
		public Keyword getCtrlCtrlKeyword_1_0() { return cCtrlCtrlKeyword_1_0; }

		//'attribute'
		public Keyword getAttributeKeyword_2() { return cAttributeKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//('[' multiplicity=Multiplicity ']')?
		public Group getGroup_4() { return cGroup_4; }

		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_4_1() { return cMultiplicityAssignment_4_1; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_4_1_0() { return cMultiplicityMultiplicityParserRuleCall_4_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }

		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//type=AttributeType?
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }

		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_6_0() { return cTypeAttributeTypeParserRuleCall_6_0; }
	}

	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUndefinedTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AttributeType:
		//	ReferenceType | IntType | BoolType | StringType | UndefinedType;
		@Override public ParserRule getRule() { return rule; }

		//ReferenceType | IntType | BoolType | StringType | UndefinedType
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReferenceType
		public RuleCall getReferenceTypeParserRuleCall_0() { return cReferenceTypeParserRuleCall_0; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_1() { return cIntTypeParserRuleCall_1; }

		//BoolType
		public RuleCall getBoolTypeParserRuleCall_2() { return cBoolTypeParserRuleCall_2; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_3() { return cStringTypeParserRuleCall_3; }

		//UndefinedType
		public RuleCall getUndefinedTypeParserRuleCall_4() { return cUndefinedTypeParserRuleCall_4; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.StringType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStringTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cStringKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//StringType:
		//	{StringType} "string" | "String";
		@Override public ParserRule getRule() { return rule; }

		//{StringType} "string" | "String"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{StringType} "string"
		public Group getGroup_0() { return cGroup_0; }

		//{StringType}
		public Action getStringTypeAction_0_0() { return cStringTypeAction_0_0; }

		//"string"
		public Keyword getStringKeyword_0_1() { return cStringKeyword_0_1; }

		//"String"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeAttributeTypeParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//Function ExprRef:
		//	{Function} 'function' name=ID ':' type=AttributeType?;
		@Override public ParserRule getRule() { return rule; }

		//{Function} 'function' name=ID ':' type=AttributeType?
		public Group getGroup() { return cGroup; }

		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }

		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=AttributeType?
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_4_0() { return cTypeAttributeTypeParserRuleCall_4_0; }
	}

	public class IntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.IntType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIntKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//IntType:
		//	{IntType} "int" | "Integer";
		@Override public ParserRule getRule() { return rule; }

		//{IntType} "int" | "Integer"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntType} "int"
		public Group getGroup_0() { return cGroup_0; }

		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }

		//"int"
		public Keyword getIntKeyword_0_1() { return cIntKeyword_0_1; }

		//"Integer"
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
	}

	public class BoolTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.BoolType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBoolTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBoolKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cBooleanKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BoolType:
		//	{BoolType} "bool" | "Boolean";
		@Override public ParserRule getRule() { return rule; }

		//{BoolType} "bool" | "Boolean"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{BoolType} "bool"
		public Group getGroup_0() { return cGroup_0; }

		//{BoolType}
		public Action getBoolTypeAction_0_0() { return cBoolTypeAction_0_0; }

		//"bool"
		public Keyword getBoolKeyword_0_1() { return cBoolKeyword_0_1; }

		//"Boolean"
		public Keyword getBooleanKeyword_1() { return cBooleanKeyword_1; }
	}

	public class ReferenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.ReferenceType");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefConceptCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefConceptIDTerminalRuleCall_0_1 = (RuleCall)cRefConceptCrossReference_0.eContents().get(1);
		
		//ReferenceType:
		//	ref=[Concept];
		@Override public ParserRule getRule() { return rule; }

		//ref=[Concept]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[Concept]
		public CrossReference getRefConceptCrossReference_0() { return cRefConceptCrossReference_0; }

		//ID
		public RuleCall getRefConceptIDTerminalRuleCall_0_1() { return cRefConceptIDTerminalRuleCall_0_1; }
	}

	public class UndefinedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.UndefinedType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUndefinedTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUndefined_typeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//UndefinedType Concept:
		//	{UndefinedType} 'undefined_type' name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{UndefinedType} 'undefined_type' name=ID
		public Group getGroup() { return cGroup; }

		//{UndefinedType}
		public Action getUndefinedTypeAction_0() { return cUndefinedTypeAction_0; }

		//'undefined_type'
		public Keyword getUndefined_typeKeyword_1() { return cUndefined_typeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class MultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Multiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Assignment cValueAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0_0 = (RuleCall)cValueAssignment_0_0.eContents().get(0);
		private final Assignment cManyAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cManyAsteriskKeyword_0_1_0 = (Keyword)cManyAssignment_0_1.eContents().get(0);
		private final Assignment cCardinalityAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCardinalityCardinalityParserRuleCall_1_0 = (RuleCall)cCardinalityAssignment_1.eContents().get(0);
		
		//Multiplicity:
		//	(value=INT | many='*') | cardinality=Cardinality;
		@Override public ParserRule getRule() { return rule; }

		//(value=INT | many='*') | cardinality=Cardinality
		public Alternatives getAlternatives() { return cAlternatives; }

		//(value=INT | many='*')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//value=INT
		public Assignment getValueAssignment_0_0() { return cValueAssignment_0_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0_0() { return cValueINTTerminalRuleCall_0_0_0; }

		//many='*'
		public Assignment getManyAssignment_0_1() { return cManyAssignment_0_1; }

		//'*'
		public Keyword getManyAsteriskKeyword_0_1_0() { return cManyAsteriskKeyword_0_1_0; }

		//cardinality=Cardinality
		public Assignment getCardinalityAssignment_1() { return cCardinalityAssignment_1; }

		//Cardinality
		public RuleCall getCardinalityCardinalityParserRuleCall_1_0() { return cCardinalityCardinalityParserRuleCall_1_0; }
	}

	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Cardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerINTTerminalRuleCall_0_0 = (RuleCall)cLowerAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cUpperAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cUpperINTTerminalRuleCall_2_0_0 = (RuleCall)cUpperAssignment_2_0.eContents().get(0);
		private final Assignment cManyAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cManyAsteriskKeyword_2_1_0 = (Keyword)cManyAssignment_2_1.eContents().get(0);
		
		//Cardinality:
		//	lower=INT '..' (upper=INT | many='*');
		@Override public ParserRule getRule() { return rule; }

		//lower=INT '..' (upper=INT | many='*')
		public Group getGroup() { return cGroup; }

		//lower=INT
		public Assignment getLowerAssignment_0() { return cLowerAssignment_0; }

		//INT
		public RuleCall getLowerINTTerminalRuleCall_0_0() { return cLowerINTTerminalRuleCall_0_0; }

		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//upper=INT | many='*'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//upper=INT
		public Assignment getUpperAssignment_2_0() { return cUpperAssignment_2_0; }

		//INT
		public RuleCall getUpperINTTerminalRuleCall_2_0_0() { return cUpperINTTerminalRuleCall_2_0_0; }

		//many='*'
		public Assignment getManyAssignment_2_1() { return cManyAssignment_2_1; }

		//'*'
		public Keyword getManyAsteriskKeyword_2_1_0() { return cManyAsteriskKeyword_2_1_0; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cRoleAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMultiplicityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_3_1_0 = (RuleCall)cMultiplicityAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeRoleableCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeRoleableIDTerminalRuleCall_5_0_1 = (RuleCall)cTypeRoleableCrossReference_5_0.eContents().get(1);
		
		///*
		// * Role needs to be Entity, or Feature
		// * Future work in order to support multiple SPLs make SPL also a role
		// */ // TODO FUTUREWORK: Allow for SPLs to be roleable
		//Role:
		//	'role' {Role} name=ID ('[' multiplicity=Multiplicity ']')? ':' type=[Roleable];
		@Override public ParserRule getRule() { return rule; }

		//'role' {Role} name=ID ('[' multiplicity=Multiplicity ']')? ':' type=[Roleable]
		public Group getGroup() { return cGroup; }

		//'role'
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }

		//{Role}
		public Action getRoleAction_1() { return cRoleAction_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//('[' multiplicity=Multiplicity ']')?
		public Group getGroup_3() { return cGroup_3; }

		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_3_1() { return cMultiplicityAssignment_3_1; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_3_1_0() { return cMultiplicityMultiplicityParserRuleCall_3_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=[Roleable]
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//[Roleable]
		public CrossReference getTypeRoleableCrossReference_5_0() { return cTypeRoleableCrossReference_5_0; }

		//ID
		public RuleCall getTypeRoleableIDTerminalRuleCall_5_0_1() { return cTypeRoleableIDTerminalRuleCall_5_0_1; }
	}

	public class AggregationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Aggregation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAggregationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCtrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCtrlCtrlKeyword_1_0 = (Keyword)cCtrlAssignment_1.eContents().get(0);
		private final Keyword cAggregationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cWholeKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cWholeAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cWholeDeclParserRuleCall_5_0_1_0 = (RuleCall)cWholeAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cPartKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cPartAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cPartDeclParserRuleCall_5_1_1_0 = (RuleCall)cPartAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Aggregation Relationship:
		//	{Aggregation} ctrl?='ctrl'? 'aggregation' name=ID '{' ('whole' whole=Decl & 'part' part=Decl) '}';
		@Override public ParserRule getRule() { return rule; }

		//{Aggregation} ctrl?='ctrl'? 'aggregation' name=ID '{' ('whole' whole=Decl & 'part' part=Decl) '}'
		public Group getGroup() { return cGroup; }

		//{Aggregation}
		public Action getAggregationAction_0() { return cAggregationAction_0; }

		//ctrl?='ctrl'?
		public Assignment getCtrlAssignment_1() { return cCtrlAssignment_1; }

		//'ctrl'
		public Keyword getCtrlCtrlKeyword_1_0() { return cCtrlCtrlKeyword_1_0; }

		//'aggregation'
		public Keyword getAggregationKeyword_2() { return cAggregationKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//'whole' whole=Decl & 'part' part=Decl
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//'whole' whole=Decl
		public Group getGroup_5_0() { return cGroup_5_0; }

		//'whole'
		public Keyword getWholeKeyword_5_0_0() { return cWholeKeyword_5_0_0; }

		//whole=Decl
		public Assignment getWholeAssignment_5_0_1() { return cWholeAssignment_5_0_1; }

		//Decl
		public RuleCall getWholeDeclParserRuleCall_5_0_1_0() { return cWholeDeclParserRuleCall_5_0_1_0; }

		//'part' part=Decl
		public Group getGroup_5_1() { return cGroup_5_1; }

		//'part'
		public Keyword getPartKeyword_5_1_0() { return cPartKeyword_5_1_0; }

		//part=Decl
		public Assignment getPartAssignment_5_1_1() { return cPartAssignment_5_1_1; }

		//Decl
		public RuleCall getPartDeclParserRuleCall_5_1_1_0() { return cPartDeclParserRuleCall_5_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class CompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Composition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCtrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCtrlCtrlKeyword_1_0 = (Keyword)cCtrlAssignment_1.eContents().get(0);
		private final Keyword cCompositionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cWholeKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cWholeAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cWholeDeclParserRuleCall_5_0_1_0 = (RuleCall)cWholeAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cPartKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cPartAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cPartDeclParserRuleCall_5_1_1_0 = (RuleCall)cPartAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Composition Relationship:
		//	{Composition} ctrl?='ctrl'? 'composition' name=ID '{' ('whole' whole=Decl & 'part' part=Decl) '}';
		@Override public ParserRule getRule() { return rule; }

		//{Composition} ctrl?='ctrl'? 'composition' name=ID '{' ('whole' whole=Decl & 'part' part=Decl) '}'
		public Group getGroup() { return cGroup; }

		//{Composition}
		public Action getCompositionAction_0() { return cCompositionAction_0; }

		//ctrl?='ctrl'?
		public Assignment getCtrlAssignment_1() { return cCtrlAssignment_1; }

		//'ctrl'
		public Keyword getCtrlCtrlKeyword_1_0() { return cCtrlCtrlKeyword_1_0; }

		//'composition'
		public Keyword getCompositionKeyword_2() { return cCompositionKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//'whole' whole=Decl & 'part' part=Decl
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//'whole' whole=Decl
		public Group getGroup_5_0() { return cGroup_5_0; }

		//'whole'
		public Keyword getWholeKeyword_5_0_0() { return cWholeKeyword_5_0_0; }

		//whole=Decl
		public Assignment getWholeAssignment_5_0_1() { return cWholeAssignment_5_0_1; }

		//Decl
		public RuleCall getWholeDeclParserRuleCall_5_0_1_0() { return cWholeDeclParserRuleCall_5_0_1_0; }

		//'part' part=Decl
		public Group getGroup_5_1() { return cGroup_5_1; }

		//'part'
		public Keyword getPartKeyword_5_1_0() { return cPartKeyword_5_1_0; }

		//part=Decl
		public Assignment getPartAssignment_5_1_1() { return cPartAssignment_5_1_1; }

		//Decl
		public RuleCall getPartDeclParserRuleCall_5_1_1_0() { return cPartDeclParserRuleCall_5_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMultiplicityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_2_1_0 = (RuleCall)cMultiplicityAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeEntityCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeEntityCrossReference_4_0.eContents().get(1);
		
		//Decl:
		//	{Decl} name=ID ('[' multiplicity=Multiplicity ']')? ':' type=[Entity];
		@Override public ParserRule getRule() { return rule; }

		//{Decl} name=ID ('[' multiplicity=Multiplicity ']')? ':' type=[Entity]
		public Group getGroup() { return cGroup; }

		//{Decl}
		public Action getDeclAction_0() { return cDeclAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//('[' multiplicity=Multiplicity ']')?
		public Group getGroup_2() { return cGroup_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_2_1() { return cMultiplicityAssignment_2_1; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_2_1_0() { return cMultiplicityMultiplicityParserRuleCall_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type=[Entity]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//[Entity]
		public CrossReference getTypeEntityCrossReference_4_0() { return cTypeEntityCrossReference_4_0; }

		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_4_0_1() { return cTypeEntityIDTerminalRuleCall_4_0_1; }
	}

	public class CompDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.CompDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEntityCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeEntityCrossReference_3_0.eContents().get(1);
		
		//CompDecl Decl:
		//	{CompDecl} name=ID ':' type=[Entity];
		@Override public ParserRule getRule() { return rule; }

		//{CompDecl} name=ID ':' type=[Entity]
		public Group getGroup() { return cGroup; }

		//{CompDecl}
		public Action getCompDeclAction_0() { return cCompDeclAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[Entity]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[Entity]
		public CrossReference getTypeEntityCrossReference_3_0() { return cTypeEntityCrossReference_3_0; }

		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_3_0_1() { return cTypeEntityIDTerminalRuleCall_3_0_1; }
	}

	public class IdListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.IdList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IdList:
		//	ID (',' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID (',' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(',' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * FUTUREWORK: IO messages for multiple SPLs
		// */ Message Concept:
		//	Input | Output;
		@Override public ParserRule getRule() { return rule; }

		//Input | Output
		public Alternatives getAlternatives() { return cAlternatives; }

		//Input
		public RuleCall getInputParserRuleCall_0() { return cInputParserRuleCall_0; }

		//Output
		public RuleCall getOutputParserRuleCall_1() { return cOutputParserRuleCall_1; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeAttributeTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cToKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cTosAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cTosFeatureCrossReference_6_1_0 = (CrossReference)cTosAssignment_6_1.eContents().get(0);
		private final RuleCall cTosFeatureIDTerminalRuleCall_6_1_0_1 = (RuleCall)cTosFeatureCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Input Message:
		//	{Input} 'input' name=ID '{' ('type' type=AttributeType)? attributes+=Attribute* ('to' tos+=[Feature]*)? '}';
		@Override public ParserRule getRule() { return rule; }

		//{Input} 'input' name=ID '{' ('type' type=AttributeType)? attributes+=Attribute* ('to' tos+=[Feature]*)? '}'
		public Group getGroup() { return cGroup; }

		//{Input}
		public Action getInputAction_0() { return cInputAction_0; }

		//'input'
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//('type' type=AttributeType)?
		public Group getGroup_4() { return cGroup_4; }

		//'type'
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }

		//type=AttributeType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_4_1_0() { return cTypeAttributeTypeParserRuleCall_4_1_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }

		//('to' tos+=[Feature]*)?
		public Group getGroup_6() { return cGroup_6; }

		//'to'
		public Keyword getToKeyword_6_0() { return cToKeyword_6_0; }

		//tos+=[Feature]*
		public Assignment getTosAssignment_6_1() { return cTosAssignment_6_1; }

		//[Feature]
		public CrossReference getTosFeatureCrossReference_6_1_0() { return cTosFeatureCrossReference_6_1_0; }

		//ID
		public RuleCall getTosFeatureIDTerminalRuleCall_6_1_0_1() { return cTosFeatureIDTerminalRuleCall_6_1_0_1; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeAttributeTypeParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFromKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFromsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cFromsFeatureCrossReference_6_1_0 = (CrossReference)cFromsAssignment_6_1.eContents().get(0);
		private final RuleCall cFromsFeatureIDTerminalRuleCall_6_1_0_1 = (RuleCall)cFromsFeatureCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Output Message:
		//	{Output} 'output' name=ID '{' ('type' type=AttributeType)? attributes+=Attribute* ('from' froms+=[Feature]*)? '}';
		@Override public ParserRule getRule() { return rule; }

		//{Output} 'output' name=ID '{' ('type' type=AttributeType)? attributes+=Attribute* ('from' froms+=[Feature]*)? '}'
		public Group getGroup() { return cGroup; }

		//{Output}
		public Action getOutputAction_0() { return cOutputAction_0; }

		//'output'
		public Keyword getOutputKeyword_1() { return cOutputKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//('type' type=AttributeType)?
		public Group getGroup_4() { return cGroup_4; }

		//'type'
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }

		//type=AttributeType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_4_1_0() { return cTypeAttributeTypeParserRuleCall_4_1_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }

		//('from' froms+=[Feature]*)?
		public Group getGroup_6() { return cGroup_6; }

		//'from'
		public Keyword getFromKeyword_6_0() { return cFromKeyword_6_0; }

		//froms+=[Feature]*
		public Assignment getFromsAssignment_6_1() { return cFromsAssignment_6_1; }

		//[Feature]
		public CrossReference getFromsFeatureCrossReference_6_1_0() { return cFromsFeatureCrossReference_6_1_0; }

		//ID
		public RuleCall getFromsFeatureIDTerminalRuleCall_6_1_0_1() { return cFromsFeatureIDTerminalRuleCall_6_1_0_1; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class InputListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.InputList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInputsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInputsRefMessageParserRuleCall_3_0_0 = (RuleCall)cInputsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInputsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInputsRefMessageParserRuleCall_3_1_1_0 = (RuleCall)cInputsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InputList:
		//	{InputList} 'inputs' '{' (inputs+=RefMessage (',' inputs+=RefMessage)*)? '}';
		@Override public ParserRule getRule() { return rule; }

		//{InputList} 'inputs' '{' (inputs+=RefMessage (',' inputs+=RefMessage)*)? '}'
		public Group getGroup() { return cGroup; }

		//{InputList}
		public Action getInputListAction_0() { return cInputListAction_0; }

		//'inputs'
		public Keyword getInputsKeyword_1() { return cInputsKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(inputs+=RefMessage (',' inputs+=RefMessage)*)?
		public Group getGroup_3() { return cGroup_3; }

		//inputs+=RefMessage
		public Assignment getInputsAssignment_3_0() { return cInputsAssignment_3_0; }

		//RefMessage
		public RuleCall getInputsRefMessageParserRuleCall_3_0_0() { return cInputsRefMessageParserRuleCall_3_0_0; }

		//(',' inputs+=RefMessage)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//inputs+=RefMessage
		public Assignment getInputsAssignment_3_1_1() { return cInputsAssignment_3_1_1; }

		//RefMessage
		public RuleCall getInputsRefMessageParserRuleCall_3_1_1_0() { return cInputsRefMessageParserRuleCall_3_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class OutputListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.OutputList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOutputsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOutputsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOutputsRefMessageParserRuleCall_3_0_0 = (RuleCall)cOutputsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cOutputsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cOutputsRefMessageParserRuleCall_3_1_1_0 = (RuleCall)cOutputsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OutputList:
		//	{OutputList} 'outputs' '{' (outputs+=RefMessage (',' outputs+=RefMessage)*)? '}';
		@Override public ParserRule getRule() { return rule; }

		//{OutputList} 'outputs' '{' (outputs+=RefMessage (',' outputs+=RefMessage)*)? '}'
		public Group getGroup() { return cGroup; }

		//{OutputList}
		public Action getOutputListAction_0() { return cOutputListAction_0; }

		//'outputs'
		public Keyword getOutputsKeyword_1() { return cOutputsKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(outputs+=RefMessage (',' outputs+=RefMessage)*)?
		public Group getGroup_3() { return cGroup_3; }

		//outputs+=RefMessage
		public Assignment getOutputsAssignment_3_0() { return cOutputsAssignment_3_0; }

		//RefMessage
		public RuleCall getOutputsRefMessageParserRuleCall_3_0_0() { return cOutputsRefMessageParserRuleCall_3_0_0; }

		//(',' outputs+=RefMessage)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//outputs+=RefMessage
		public Assignment getOutputsAssignment_3_1_1() { return cOutputsAssignment_3_1_1; }

		//RefMessage
		public RuleCall getOutputsRefMessageParserRuleCall_3_1_1_0() { return cOutputsRefMessageParserRuleCall_3_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RefMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.RefMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRefMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefMsgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefMsgMessageCrossReference_1_0 = (CrossReference)cRefMsgAssignment_1.eContents().get(0);
		private final RuleCall cRefMsgMessageIDTerminalRuleCall_1_0_1 = (RuleCall)cRefMsgMessageCrossReference_1_0.eContents().get(1);
		
		//RefMessage:
		//	{RefMessage} refMsg=[Message];
		@Override public ParserRule getRule() { return rule; }

		//{RefMessage} refMsg=[Message]
		public Group getGroup() { return cGroup; }

		//{RefMessage}
		public Action getRefMessageAction_0() { return cRefMessageAction_0; }

		//refMsg=[Message]
		public Assignment getRefMsgAssignment_1() { return cRefMsgAssignment_1; }

		//[Message]
		public CrossReference getRefMsgMessageCrossReference_1_0() { return cRefMsgMessageCrossReference_1_0; }

		//ID
		public RuleCall getRefMsgMessageIDTerminalRuleCall_1_0_1() { return cRefMsgMessageIDTerminalRuleCall_1_0_1; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFeatureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cAttributesAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_3_1_0_0 = (RuleCall)cAttributesAssignment_3_1_0.eContents().get(0);
		private final Assignment cInputlistAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInputlistInputListParserRuleCall_3_1_1_0 = (RuleCall)cInputlistAssignment_3_1_1.eContents().get(0);
		private final Assignment cOutputlistAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cOutputlistOutputListParserRuleCall_3_1_2_0 = (RuleCall)cOutputlistAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		///*
		// * Add input and output lists for messages
		// * FUTUREWORK: Third messsage list for IO
		// */ Feature Roleable:
		//	{Feature} 'feature' name=ID ('{' (attributes+=Attribute* inputlist=InputList? outputlist=OutputList?) '}')?;
		@Override public ParserRule getRule() { return rule; }

		//{Feature} 'feature' name=ID ('{' (attributes+=Attribute* inputlist=InputList? outputlist=OutputList?) '}')?
		public Group getGroup() { return cGroup; }

		//{Feature}
		public Action getFeatureAction_0() { return cFeatureAction_0; }

		//'feature'
		public Keyword getFeatureKeyword_1() { return cFeatureKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//('{' (attributes+=Attribute* inputlist=InputList? outputlist=OutputList?) '}')?
		public Group getGroup_3() { return cGroup_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//attributes+=Attribute* inputlist=InputList? outputlist=OutputList?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3_1_0() { return cAttributesAssignment_3_1_0; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_1_0_0() { return cAttributesAttributeParserRuleCall_3_1_0_0; }

		//inputlist=InputList?
		public Assignment getInputlistAssignment_3_1_1() { return cInputlistAssignment_3_1_1; }

		//InputList
		public RuleCall getInputlistInputListParserRuleCall_3_1_1_0() { return cInputlistInputListParserRuleCall_3_1_1_0; }

		//outputlist=OutputList?
		public Assignment getOutputlistAssignment_3_1_2() { return cOutputlistAssignment_3_1_2; }

		//OutputList
		public RuleCall getOutputlistOutputListParserRuleCall_3_1_2_0() { return cOutputlistOutputListParserRuleCall_3_1_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class SPLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.SPL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSPLAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSPLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cFeatureNodesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cFeatureNodesFeatureNodeParserRuleCall_4_0_0 = (RuleCall)cFeatureNodesAssignment_4_0.eContents().get(0);
		private final Assignment cXorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cXorsXORNodeParserRuleCall_4_1_0 = (RuleCall)cXorsAssignment_4_1.eContents().get(0);
		private final Assignment cAndsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAndsAndNodeParserRuleCall_4_2_0 = (RuleCall)cAndsAssignment_4_2.eContents().get(0);
		private final Assignment cOrsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cOrsOrNodeParserRuleCall_4_3_0 = (RuleCall)cOrsAssignment_4_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SPL Node:
		//	{SPL} 'SPL' name=ID '{' (featureNodes+=FeatureNode* xors+=XORNode* ands+=AndNode* ors+=OrNode*) '}';
		@Override public ParserRule getRule() { return rule; }

		//{SPL} 'SPL' name=ID '{' (featureNodes+=FeatureNode* xors+=XORNode* ands+=AndNode* ors+=OrNode*) '}'
		public Group getGroup() { return cGroup; }

		//{SPL}
		public Action getSPLAction_0() { return cSPLAction_0; }

		//'SPL'
		public Keyword getSPLKeyword_1() { return cSPLKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//featureNodes+=FeatureNode* xors+=XORNode* ands+=AndNode* ors+=OrNode*
		public Group getGroup_4() { return cGroup_4; }

		//featureNodes+=FeatureNode*
		public Assignment getFeatureNodesAssignment_4_0() { return cFeatureNodesAssignment_4_0; }

		//FeatureNode
		public RuleCall getFeatureNodesFeatureNodeParserRuleCall_4_0_0() { return cFeatureNodesFeatureNodeParserRuleCall_4_0_0; }

		//xors+=XORNode*
		public Assignment getXorsAssignment_4_1() { return cXorsAssignment_4_1; }

		//XORNode
		public RuleCall getXorsXORNodeParserRuleCall_4_1_0() { return cXorsXORNodeParserRuleCall_4_1_0; }

		//ands+=AndNode*
		public Assignment getAndsAssignment_4_2() { return cAndsAssignment_4_2; }

		//AndNode
		public RuleCall getAndsAndNodeParserRuleCall_4_2_0() { return cAndsAndNodeParserRuleCall_4_2_0; }

		//ors+=OrNode*
		public Assignment getOrsAssignment_4_3() { return cOrsAssignment_4_3; }

		//OrNode
		public RuleCall getOrsOrNodeParserRuleCall_4_3_0() { return cOrsOrNodeParserRuleCall_4_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class XORNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.XORNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXORNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cXORKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureNodesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureNodesFeatureNodeParserRuleCall_3_0 = (RuleCall)cFeatureNodesAssignment_3.eContents().get(0);
		private final Assignment cFeatureNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeatureNodesFeatureNodeParserRuleCall_4_0 = (RuleCall)cFeatureNodesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XORNode Node:
		//	{XORNode} 'XOR' '{' featureNodes+=FeatureNode featureNodes+=FeatureNode+ '}';
		@Override public ParserRule getRule() { return rule; }

		//{XORNode} 'XOR' '{' featureNodes+=FeatureNode featureNodes+=FeatureNode+ '}'
		public Group getGroup() { return cGroup; }

		//{XORNode}
		public Action getXORNodeAction_0() { return cXORNodeAction_0; }

		//'XOR'
		public Keyword getXORKeyword_1() { return cXORKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//featureNodes+=FeatureNode
		public Assignment getFeatureNodesAssignment_3() { return cFeatureNodesAssignment_3; }

		//FeatureNode
		public RuleCall getFeatureNodesFeatureNodeParserRuleCall_3_0() { return cFeatureNodesFeatureNodeParserRuleCall_3_0; }

		//featureNodes+=FeatureNode+
		public Assignment getFeatureNodesAssignment_4() { return cFeatureNodesAssignment_4; }

		//FeatureNode
		public RuleCall getFeatureNodesFeatureNodeParserRuleCall_4_0() { return cFeatureNodesFeatureNodeParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AndNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.AndNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cANDKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureNodesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureNodesFeatureNodeParserRuleCall_3_0 = (RuleCall)cFeatureNodesAssignment_3.eContents().get(0);
		private final Assignment cFeatureNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeatureNodesFeatureNodeParserRuleCall_4_0 = (RuleCall)cFeatureNodesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AndNode Node:
		//	{AndNode} 'AND' '{' featureNodes+=FeatureNode featureNodes+=FeatureNode+ '}';
		@Override public ParserRule getRule() { return rule; }

		//{AndNode} 'AND' '{' featureNodes+=FeatureNode featureNodes+=FeatureNode+ '}'
		public Group getGroup() { return cGroup; }

		//{AndNode}
		public Action getAndNodeAction_0() { return cAndNodeAction_0; }

		//'AND'
		public Keyword getANDKeyword_1() { return cANDKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//featureNodes+=FeatureNode
		public Assignment getFeatureNodesAssignment_3() { return cFeatureNodesAssignment_3; }

		//FeatureNode
		public RuleCall getFeatureNodesFeatureNodeParserRuleCall_3_0() { return cFeatureNodesFeatureNodeParserRuleCall_3_0; }

		//featureNodes+=FeatureNode+
		public Assignment getFeatureNodesAssignment_4() { return cFeatureNodesAssignment_4; }

		//FeatureNode
		public RuleCall getFeatureNodesFeatureNodeParserRuleCall_4_0() { return cFeatureNodesFeatureNodeParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class OrNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.OrNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cORKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeatureNodesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeatureNodesFeatureNodeParserRuleCall_3_0 = (RuleCall)cFeatureNodesAssignment_3.eContents().get(0);
		private final Assignment cFeatureNodesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeatureNodesFeatureNodeParserRuleCall_4_0 = (RuleCall)cFeatureNodesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OrNode Node:
		//	{OrNode} 'OR' '{' featureNodes+=FeatureNode featureNodes+=FeatureNode+ '}';
		@Override public ParserRule getRule() { return rule; }

		//{OrNode} 'OR' '{' featureNodes+=FeatureNode featureNodes+=FeatureNode+ '}'
		public Group getGroup() { return cGroup; }

		//{OrNode}
		public Action getOrNodeAction_0() { return cOrNodeAction_0; }

		//'OR'
		public Keyword getORKeyword_1() { return cORKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//featureNodes+=FeatureNode
		public Assignment getFeatureNodesAssignment_3() { return cFeatureNodesAssignment_3; }

		//FeatureNode
		public RuleCall getFeatureNodesFeatureNodeParserRuleCall_3_0() { return cFeatureNodesFeatureNodeParserRuleCall_3_0; }

		//featureNodes+=FeatureNode+
		public Assignment getFeatureNodesAssignment_4() { return cFeatureNodesAssignment_4; }

		//FeatureNode
		public RuleCall getFeatureNodesFeatureNodeParserRuleCall_4_0() { return cFeatureNodesFeatureNodeParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FeatureNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.FeatureNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFeatureNodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFeatureFeatureCrossReference_2_0 = (CrossReference)cFeatureAssignment_2.eContents().get(0);
		private final RuleCall cFeatureFeatureIDTerminalRuleCall_2_0_1 = (RuleCall)cFeatureFeatureCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMultiplicityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMultiplicityMultiplicityParserRuleCall_3_1_0 = (RuleCall)cMultiplicityAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cFeatureNodesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cFeatureNodesFeatureNodeParserRuleCall_4_1_0_0 = (RuleCall)cFeatureNodesAssignment_4_1_0.eContents().get(0);
		private final Assignment cXorsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cXorsXORNodeParserRuleCall_4_1_1_0 = (RuleCall)cXorsAssignment_4_1_1.eContents().get(0);
		private final Assignment cAndsAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cAndsAndNodeParserRuleCall_4_1_2_0 = (RuleCall)cAndsAssignment_4_1_2.eContents().get(0);
		private final Assignment cOrsAssignment_4_1_3 = (Assignment)cGroup_4_1.eContents().get(3);
		private final RuleCall cOrsOrNodeParserRuleCall_4_1_3_0 = (RuleCall)cOrsAssignment_4_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//// TODO: Featurnodes need multiplicity, unless inside a binary operator node.
		//// TODO: Try to force indentation for them
		//FeatureNode Node:
		//	{FeatureNode} 'FeatureNode' feature=[Feature] ('[' multiplicity=Multiplicity ']')? ('{' (featureNodes+=FeatureNode*
		//	xors+=XORNode* ands+=AndNode* ors+=OrNode*) '}')?;
		@Override public ParserRule getRule() { return rule; }

		//{FeatureNode} 'FeatureNode' feature=[Feature] ('[' multiplicity=Multiplicity ']')? ('{' (featureNodes+=FeatureNode*
		//xors+=XORNode* ands+=AndNode* ors+=OrNode*) '}')?
		public Group getGroup() { return cGroup; }

		//{FeatureNode}
		public Action getFeatureNodeAction_0() { return cFeatureNodeAction_0; }

		//'FeatureNode'
		public Keyword getFeatureNodeKeyword_1() { return cFeatureNodeKeyword_1; }

		//feature=[Feature]
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//[Feature]
		public CrossReference getFeatureFeatureCrossReference_2_0() { return cFeatureFeatureCrossReference_2_0; }

		//ID
		public RuleCall getFeatureFeatureIDTerminalRuleCall_2_0_1() { return cFeatureFeatureIDTerminalRuleCall_2_0_1; }

		//('[' multiplicity=Multiplicity ']')?
		public Group getGroup_3() { return cGroup_3; }

		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_3_1() { return cMultiplicityAssignment_3_1; }

		//Multiplicity
		public RuleCall getMultiplicityMultiplicityParserRuleCall_3_1_0() { return cMultiplicityMultiplicityParserRuleCall_3_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }

		//('{' (featureNodes+=FeatureNode* xors+=XORNode* ands+=AndNode* ors+=OrNode*) '}')?
		public Group getGroup_4() { return cGroup_4; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//featureNodes+=FeatureNode* xors+=XORNode* ands+=AndNode* ors+=OrNode*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//featureNodes+=FeatureNode*
		public Assignment getFeatureNodesAssignment_4_1_0() { return cFeatureNodesAssignment_4_1_0; }

		//FeatureNode
		public RuleCall getFeatureNodesFeatureNodeParserRuleCall_4_1_0_0() { return cFeatureNodesFeatureNodeParserRuleCall_4_1_0_0; }

		//xors+=XORNode*
		public Assignment getXorsAssignment_4_1_1() { return cXorsAssignment_4_1_1; }

		//XORNode
		public RuleCall getXorsXORNodeParserRuleCall_4_1_1_0() { return cXorsXORNodeParserRuleCall_4_1_1_0; }

		//ands+=AndNode*
		public Assignment getAndsAssignment_4_1_2() { return cAndsAssignment_4_1_2; }

		//AndNode
		public RuleCall getAndsAndNodeParserRuleCall_4_1_2_0() { return cAndsAndNodeParserRuleCall_4_1_2_0; }

		//ors+=OrNode*
		public Assignment getOrsAssignment_4_1_3() { return cOrsAssignment_4_1_3; }

		//OrNode
		public RuleCall getOrsOrNodeParserRuleCall_4_1_3_0() { return cOrsOrNodeParserRuleCall_4_1_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cConstantAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cConstantEnumConstParserRuleCall_4_0_0 = (RuleCall)cConstantAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cConstantAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cConstantEnumConstParserRuleCall_4_1_1_0 = (RuleCall)cConstantAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enumeration Concept:
		//	{Enumeration} 'enum' name=ID '{' (constant+=EnumConst (',' constant+=EnumConst)*) '}';
		@Override public ParserRule getRule() { return rule; }

		//{Enumeration} 'enum' name=ID '{' (constant+=EnumConst (',' constant+=EnumConst)*) '}'
		public Group getGroup() { return cGroup; }

		//{Enumeration}
		public Action getEnumerationAction_0() { return cEnumerationAction_0; }

		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//constant+=EnumConst (',' constant+=EnumConst)*
		public Group getGroup_4() { return cGroup_4; }

		//constant+=EnumConst
		public Assignment getConstantAssignment_4_0() { return cConstantAssignment_4_0; }

		//EnumConst
		public RuleCall getConstantEnumConstParserRuleCall_4_0_0() { return cConstantEnumConstParserRuleCall_4_0_0; }

		//(',' constant+=EnumConst)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//constant+=EnumConst
		public Assignment getConstantAssignment_4_1_1() { return cConstantAssignment_4_1_1; }

		//EnumConst
		public RuleCall getConstantEnumConstParserRuleCall_4_1_1_0() { return cConstantEnumConstParserRuleCall_4_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EnumConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.EnumConst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumConstAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumConst ExprRef:
		//	{EnumConst} name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{EnumConst} name=ID
		public Group getGroup() { return cGroup; }

		//{EnumConst}
		public Action getEnumConstAction_0() { return cEnumConstAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class BehaviourModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.BehaviourModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBehaviourModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBehaviourKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeaturemodulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeaturemodulesFeatureModuleParserRuleCall_3_0 = (RuleCall)cFeaturemodulesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///**
		// * Behaviour Model
		// */ BehaviourModel:
		//	{BehaviourModel} 'Behaviour' '{' featuremodules+=FeatureModule* '}';
		@Override public ParserRule getRule() { return rule; }

		//{BehaviourModel} 'Behaviour' '{' featuremodules+=FeatureModule* '}'
		public Group getGroup() { return cGroup; }

		//{BehaviourModel}
		public Action getBehaviourModelAction_0() { return cBehaviourModelAction_0; }

		//'Behaviour'
		public Keyword getBehaviourKeyword_1() { return cBehaviourKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//featuremodules+=FeatureModule*
		public Assignment getFeaturemodulesAssignment_3() { return cFeaturemodulesAssignment_3; }

		//FeatureModule
		public RuleCall getFeaturemodulesFeatureModuleParserRuleCall_3_0() { return cFeaturemodulesFeatureModuleParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FeatureModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.FeatureModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFeatureModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeaturerefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeaturerefRoleableCrossReference_1_0 = (CrossReference)cFeaturerefAssignment_1.eContents().get(0);
		private final RuleCall cFeaturerefRoleableIDTerminalRuleCall_1_0_1 = (RuleCall)cFeaturerefRoleableCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cConstraintsAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cConstraintsConstraintParserRuleCall_3_0_0 = (RuleCall)cConstraintsAssignment_3_0.eContents().get(0);
		private final Assignment cStatemachineAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cStatemachineStateMachineParserRuleCall_3_1_0 = (RuleCall)cStatemachineAssignment_3_1.eContents().get(0);
		private final Assignment cFragmentsAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cFragmentsFragmentParserRuleCall_3_2_0 = (RuleCall)cFragmentsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FeatureModule:
		//	'FeatureModule' featureref=[Roleable] '{' (constraints=Constraint? & statemachine+=StateMachine* &
		//	fragments+=Fragment*) '}';
		@Override public ParserRule getRule() { return rule; }

		//'FeatureModule' featureref=[Roleable] '{' (constraints=Constraint? & statemachine+=StateMachine* & fragments+=Fragment*)
		//'}'
		public Group getGroup() { return cGroup; }

		//'FeatureModule'
		public Keyword getFeatureModuleKeyword_0() { return cFeatureModuleKeyword_0; }

		//featureref=[Roleable]
		public Assignment getFeaturerefAssignment_1() { return cFeaturerefAssignment_1; }

		//[Roleable]
		public CrossReference getFeaturerefRoleableCrossReference_1_0() { return cFeaturerefRoleableCrossReference_1_0; }

		//ID
		public RuleCall getFeaturerefRoleableIDTerminalRuleCall_1_0_1() { return cFeaturerefRoleableIDTerminalRuleCall_1_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//constraints=Constraint? & statemachine+=StateMachine* & fragments+=Fragment*
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//constraints=Constraint?
		public Assignment getConstraintsAssignment_3_0() { return cConstraintsAssignment_3_0; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_3_0_0() { return cConstraintsConstraintParserRuleCall_3_0_0; }

		//statemachine+=StateMachine*
		public Assignment getStatemachineAssignment_3_1() { return cStatemachineAssignment_3_1; }

		//StateMachine
		public RuleCall getStatemachineStateMachineParserRuleCall_3_1_0() { return cStatemachineStateMachineParserRuleCall_3_1_0; }

		//fragments+=Fragment*
		public Assignment getFragmentsAssignment_3_2() { return cFragmentsAssignment_3_2; }

		//Fragment
		public RuleCall getFragmentsFragmentParserRuleCall_3_2_0() { return cFragmentsFragmentParserRuleCall_3_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatemachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cRegionsAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cRegionsRegionParserRuleCall_3_0_0 = (RuleCall)cRegionsAssignment_3_0.eContents().get(0);
		private final Assignment cTransitionsAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_3_1_0 = (RuleCall)cTransitionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StateMachine:
		//	'statemachine' name=ID '{' (regions+=Region+ & transitions+=Transition*) '}';
		@Override public ParserRule getRule() { return rule; }

		//'statemachine' name=ID '{' (regions+=Region+ & transitions+=Transition*) '}'
		public Group getGroup() { return cGroup; }

		//'statemachine'
		public Keyword getStatemachineKeyword_0() { return cStatemachineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//regions+=Region+ & transitions+=Transition*
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//regions+=Region+
		public Assignment getRegionsAssignment_3_0() { return cRegionsAssignment_3_0; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_3_0_0() { return cRegionsRegionParserRuleCall_3_0_0; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_3_1() { return cTransitionsAssignment_3_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_3_1_0() { return cTransitionsTransitionParserRuleCall_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InitStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.InitState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStaterefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStaterefStateCrossReference_3_0 = (CrossReference)cStaterefAssignment_3.eContents().get(0);
		private final RuleCall cStaterefStateIDTerminalRuleCall_3_0_1 = (RuleCall)cStaterefStateCrossReference_3_0.eContents().get(1);
		
		//InitState:
		//	{InitState} 'init' '=' stateref=[State]?;
		@Override public ParserRule getRule() { return rule; }

		//{InitState} 'init' '=' stateref=[State]?
		public Group getGroup() { return cGroup; }

		//{InitState}
		public Action getInitStateAction_0() { return cInitStateAction_0; }

		//'init'
		public Keyword getInitKeyword_1() { return cInitKeyword_1; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//stateref=[State]?
		public Assignment getStaterefAssignment_3() { return cStaterefAssignment_3; }

		//[State]
		public CrossReference getStaterefStateCrossReference_3_0() { return cStaterefStateCrossReference_3_0; }

		//ID
		public RuleCall getStaterefStateIDTerminalRuleCall_3_0_1() { return cStaterefStateIDTerminalRuleCall_3_0_1; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRegionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRegionsRegionParserRuleCall_4_0 = (RuleCall)cRegionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State Component:
		//	{State} 'state' name=ID '{' regions+=Region* '}';
		@Override public ParserRule getRule() { return rule; }

		//{State} 'state' name=ID '{' regions+=Region* '}'
		public Group getGroup() { return cGroup; }

		//{State}
		public Action getStateAction_0() { return cStateAction_0; }

		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//regions+=Region*
		public Assignment getRegionsAssignment_4() { return cRegionsAssignment_4; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_4_0() { return cRegionsRegionParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class RegionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Region");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRegionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitInitStateParserRuleCall_4_0 = (RuleCall)cInitAssignment_4.eContents().get(0);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Region Component:
		//	{Region} 'region' name=ID '{' init=InitState? states+=State* '}';
		@Override public ParserRule getRule() { return rule; }

		//{Region} 'region' name=ID '{' init=InitState? states+=State* '}'
		public Group getGroup() { return cGroup; }

		//{Region}
		public Action getRegionAction_0() { return cRegionAction_0; }

		//'region'
		public Keyword getRegionKeyword_1() { return cRegionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//init=InitState?
		public Assignment getInitAssignment_4() { return cInitAssignment_4; }

		//InitState
		public RuleCall getInitInitStateParserRuleCall_4_0() { return cInitInitStateParserRuleCall_4_0; }

		//states+=State*
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }

		//State
		public RuleCall getStatesStateParserRuleCall_5_0() { return cStatesStateParserRuleCall_5_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPriorityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPriorityPriorityParserRuleCall_3_0 = (RuleCall)cPriorityAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSrcAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSrcStateCrossReference_5_0 = (CrossReference)cSrcAssignment_5.eContents().get(0);
		private final RuleCall cSrcStateQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cSrcStateCrossReference_5_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDstAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cDstStateCrossReference_7_0 = (CrossReference)cDstAssignment_7.eContents().get(0);
		private final RuleCall cDstStateQualifiedNameParserRuleCall_7_0_1 = (RuleCall)cDstStateCrossReference_7_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTrigAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTrigTriggerParserRuleCall_9_0 = (RuleCall)cTrigAssignment_9.eContents().get(0);
		private final Assignment cGuardAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cGuardGuardParserRuleCall_10_0 = (RuleCall)cGuardAssignment_10.eContents().get(0);
		private final Assignment cListAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cListWCAListParserRuleCall_11_0 = (RuleCall)cListAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Transition:
		//	{Transition} 'transition' name=ID priority=Priority? ':' src=[State|QualifiedName] '->' dst=[State|QualifiedName] '{'
		//	trig=Trigger? guard=Guard? list=WCAList? '}';
		@Override public ParserRule getRule() { return rule; }

		//{Transition} 'transition' name=ID priority=Priority? ':' src=[State|QualifiedName] '->' dst=[State|QualifiedName] '{'
		//trig=Trigger? guard=Guard? list=WCAList? '}'
		public Group getGroup() { return cGroup; }

		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }

		//'transition'
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//priority=Priority?
		public Assignment getPriorityAssignment_3() { return cPriorityAssignment_3; }

		//Priority
		public RuleCall getPriorityPriorityParserRuleCall_3_0() { return cPriorityPriorityParserRuleCall_3_0; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//src=[State|QualifiedName]
		public Assignment getSrcAssignment_5() { return cSrcAssignment_5; }

		//[State|QualifiedName]
		public CrossReference getSrcStateCrossReference_5_0() { return cSrcStateCrossReference_5_0; }

		//QualifiedName
		public RuleCall getSrcStateQualifiedNameParserRuleCall_5_0_1() { return cSrcStateQualifiedNameParserRuleCall_5_0_1; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//dst=[State|QualifiedName]
		public Assignment getDstAssignment_7() { return cDstAssignment_7; }

		//[State|QualifiedName]
		public CrossReference getDstStateCrossReference_7_0() { return cDstStateCrossReference_7_0; }

		//QualifiedName
		public RuleCall getDstStateQualifiedNameParserRuleCall_7_0_1() { return cDstStateQualifiedNameParserRuleCall_7_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//trig=Trigger?
		public Assignment getTrigAssignment_9() { return cTrigAssignment_9; }

		//Trigger
		public RuleCall getTrigTriggerParserRuleCall_9_0() { return cTrigTriggerParserRuleCall_9_0; }

		//guard=Guard?
		public Assignment getGuardAssignment_10() { return cGuardAssignment_10; }

		//Guard
		public RuleCall getGuardGuardParserRuleCall_10_0() { return cGuardGuardParserRuleCall_10_0; }

		//list=WCAList?
		public Assignment getListAssignment_11() { return cListAssignment_11; }

		//WCAList
		public RuleCall getListWCAListParserRuleCall_11_0() { return cListWCAListParserRuleCall_11_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class PriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Priority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTranslistAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTranslistTransListParserRuleCall_1_0 = (RuleCall)cTranslistAssignment_1.eContents().get(0);
		
		//// This should be list of transitions - it has priority over all of those
		//Priority:
		//	'>' translist=TransList;
		@Override public ParserRule getRule() { return rule; }

		//'>' translist=TransList
		public Group getGroup() { return cGroup; }

		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//translist=TransList
		public Assignment getTranslistAssignment_1() { return cTranslistAssignment_1; }

		//TransList
		public RuleCall getTranslistTransListParserRuleCall_1_0() { return cTranslistTransListParserRuleCall_1_0; }
	}

	public class TransListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.TransList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTransitionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTransitionsTransitionCrossReference_0_0 = (CrossReference)cTransitionsAssignment_0.eContents().get(0);
		private final RuleCall cTransitionsTransitionIDTerminalRuleCall_0_0_1 = (RuleCall)cTransitionsTransitionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTransitionsTransitionCrossReference_1_1_0 = (CrossReference)cTransitionsAssignment_1_1.eContents().get(0);
		private final RuleCall cTransitionsTransitionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTransitionsTransitionCrossReference_1_1_0.eContents().get(1);
		
		//TransList:
		//	transitions+=[Transition] (',' transitions+=[Transition])*;
		@Override public ParserRule getRule() { return rule; }

		//transitions+=[Transition] (',' transitions+=[Transition])*
		public Group getGroup() { return cGroup; }

		//transitions+=[Transition]
		public Assignment getTransitionsAssignment_0() { return cTransitionsAssignment_0; }

		//[Transition]
		public CrossReference getTransitionsTransitionCrossReference_0_0() { return cTransitionsTransitionCrossReference_0_0; }

		//ID
		public RuleCall getTransitionsTransitionIDTerminalRuleCall_0_0_1() { return cTransitionsTransitionIDTerminalRuleCall_0_0_1; }

		//(',' transitions+=[Transition])*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//transitions+=[Transition]
		public Assignment getTransitionsAssignment_1_1() { return cTransitionsAssignment_1_1; }

		//[Transition]
		public CrossReference getTransitionsTransitionCrossReference_1_1_0() { return cTransitionsTransitionCrossReference_1_1_0; }

		//ID
		public RuleCall getTransitionsTransitionIDTerminalRuleCall_1_1_0_1() { return cTransitionsTransitionIDTerminalRuleCall_1_1_0_1; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cPredicateAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cPredicatePredicateParserRuleCall_1_0_1_0 = (RuleCall)cPredicateAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Guard:
		//	{Guard} ('[' predicate=Predicate? ']' | '[]');
		@Override public ParserRule getRule() { return rule; }

		//{Guard} ('[' predicate=Predicate? ']' | '[]')
		public Group getGroup() { return cGroup; }

		//{Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }

		//'[' predicate=Predicate? ']' | '[]'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'[' predicate=Predicate? ']'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//predicate=Predicate?
		public Assignment getPredicateAssignment_1_0_1() { return cPredicateAssignment_1_0_1; }

		//Predicate
		public RuleCall getPredicatePredicateParserRuleCall_1_0_1_0() { return cPredicatePredicateParserRuleCall_1_0_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_0_2() { return cRightSquareBracketKeyword_1_0_2; }

		//'[]'
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_1; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOverrideAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cOverrideOverrideParserRuleCall_2_0_0 = (RuleCall)cOverrideAssignment_2_0.eContents().get(0);
		private final Assignment cWceAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cWceWCEParserRuleCall_2_1_0 = (RuleCall)cWceAssignment_2_1.eContents().get(0);
		
		//// When/After is timing requirements delete/comment for later.
		//// TODO: FUTURE timing requirements.
		//Trigger:
		//	{Trigger} 'event:' (override=Override | wce=WCE)?
		//	/*| 'when' ID
		//	| 'after' ID)*/;
		@Override public ParserRule getRule() { return rule; }

		//{Trigger} 'event:' (override=Override | wce=WCE)?
		public Group getGroup() { return cGroup; }

		//{Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }

		//'event:'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//(override=Override | wce=WCE)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//override=Override
		public Assignment getOverrideAssignment_2_0() { return cOverrideAssignment_2_0; }

		//Override
		public RuleCall getOverrideOverrideParserRuleCall_2_0_0() { return cOverrideOverrideParserRuleCall_2_0_0; }

		//wce=WCE
		public Assignment getWceAssignment_2_1() { return cWceAssignment_2_1; }

		//WCE
		public RuleCall getWceWCEParserRuleCall_2_1_0() { return cWceWCEParserRuleCall_2_1_0; }
	}

	public class OverrideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Override");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOverrideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTransitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTransitionTransitionCrossReference_2_0 = (CrossReference)cTransitionAssignment_2.eContents().get(0);
		private final RuleCall cTransitionTransitionIDTerminalRuleCall_2_0_1 = (RuleCall)cTransitionTransitionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Override:
		//	'override' '(' transition=[Transition] ')';
		@Override public ParserRule getRule() { return rule; }

		//'override' '(' transition=[Transition] ')'
		public Group getGroup() { return cGroup; }

		//'override'
		public Keyword getOverrideKeyword_0() { return cOverrideKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//transition=[Transition]
		public Assignment getTransitionAssignment_2() { return cTransitionAssignment_2; }

		//[Transition]
		public CrossReference getTransitionTransitionCrossReference_2_0() { return cTransitionTransitionCrossReference_2_0; }

		//ID
		public RuleCall getTransitionTransitionIDTerminalRuleCall_2_0_1() { return cTransitionTransitionIDTerminalRuleCall_2_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class WCEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.WCE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAddobjAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cAddobjExprRefCrossReference_0_0_0 = (CrossReference)cAddobjAssignment_0_0.eContents().get(0);
		private final RuleCall cAddobjExprRefQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cAddobjExprRefCrossReference_0_0_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAttrAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cAttrAttributeCrossReference_1_0 = (CrossReference)cAttrAssignment_1.eContents().get(0);
		private final RuleCall cAttrAttributeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cAttrAttributeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cRemobjAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cRemobjExprRefCrossReference_2_0_0 = (CrossReference)cRemobjAssignment_2_0.eContents().get(0);
		private final RuleCall cRemobjExprRefQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cRemobjExprRefCrossReference_2_0_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//// Can also have minus for removing concept
		//// and a ~ as well for when an attribute changes. (this is the dot accessing)
		//// Might need input?.
		//WCE:
		//	addobj=[ExprRef|QualifiedName] '+' | attr=[Attribute|QualifiedName] | remobj=[ExprRef|QualifiedName] '-';
		@Override public ParserRule getRule() { return rule; }

		//addobj=[ExprRef|QualifiedName] '+' | attr=[Attribute|QualifiedName] | remobj=[ExprRef|QualifiedName] '-'
		public Alternatives getAlternatives() { return cAlternatives; }

		//addobj=[ExprRef|QualifiedName] '+'
		public Group getGroup_0() { return cGroup_0; }

		//addobj=[ExprRef|QualifiedName]
		public Assignment getAddobjAssignment_0_0() { return cAddobjAssignment_0_0; }

		//[ExprRef|QualifiedName]
		public CrossReference getAddobjExprRefCrossReference_0_0_0() { return cAddobjExprRefCrossReference_0_0_0; }

		//QualifiedName
		public RuleCall getAddobjExprRefQualifiedNameParserRuleCall_0_0_0_1() { return cAddobjExprRefQualifiedNameParserRuleCall_0_0_0_1; }

		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }

		//attr=[Attribute|QualifiedName]
		public Assignment getAttrAssignment_1() { return cAttrAssignment_1; }

		//[Attribute|QualifiedName]
		public CrossReference getAttrAttributeCrossReference_1_0() { return cAttrAttributeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getAttrAttributeQualifiedNameParserRuleCall_1_0_1() { return cAttrAttributeQualifiedNameParserRuleCall_1_0_1; }

		//remobj=[ExprRef|QualifiedName] '-'
		public Group getGroup_2() { return cGroup_2; }

		//remobj=[ExprRef|QualifiedName]
		public Assignment getRemobjAssignment_2_0() { return cRemobjAssignment_2_0; }

		//[ExprRef|QualifiedName]
		public CrossReference getRemobjExprRefCrossReference_2_0_0() { return cRemobjExprRefCrossReference_2_0_0; }

		//QualifiedName
		public RuleCall getRemobjExprRefQualifiedNameParserRuleCall_2_0_0_1() { return cRemobjExprRefQualifiedNameParserRuleCall_2_0_0_1; }

		//'-'
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
	}

	public class WCAListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.WCAList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWCAListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cActionsWCAParserRuleCall_2_0_0 = (RuleCall)cActionsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cActionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cActionsWCAParserRuleCall_2_1_1_0 = (RuleCall)cActionsAssignment_2_1_1.eContents().get(0);
		
		//WCAList:
		//	{WCAList} '/' (actions+=WCA (',' actions+=WCA)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{WCAList} '/' (actions+=WCA (',' actions+=WCA)*)?
		public Group getGroup() { return cGroup; }

		//{WCAList}
		public Action getWCAListAction_0() { return cWCAListAction_0; }

		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//(actions+=WCA (',' actions+=WCA)*)?
		public Group getGroup_2() { return cGroup_2; }

		//actions+=WCA
		public Assignment getActionsAssignment_2_0() { return cActionsAssignment_2_0; }

		//WCA
		public RuleCall getActionsWCAParserRuleCall_2_0_0() { return cActionsWCAParserRuleCall_2_0_0; }

		//(',' actions+=WCA)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//actions+=WCA
		public Assignment getActionsAssignment_2_1_1() { return cActionsAssignment_2_1_1; }

		//WCA
		public RuleCall getActionsWCAParserRuleCall_2_1_1_0() { return cActionsWCAParserRuleCall_2_1_1_0; }
	}

	public class WCAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.WCA");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWCAAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionActionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WCA:
		//	{WCA} name=ID '{' action=Action?
		//	//override=Override?
		//	//guard=Guard? |
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{WCA} name=ID '{' action=Action? //override=Override?
		////guard=Guard? |
		//'}'
		public Group getGroup() { return cGroup; }

		//{WCA}
		public Action getWCAAction_0() { return cWCAAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//action=Action?
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }

		//Action
		public RuleCall getActionActionParserRuleCall_3_0() { return cActionActionParserRuleCall_3_0; }

		////override=Override?
		////guard=Guard? |
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cActionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cTypeExprRefCrossReference_0_2_0 = (CrossReference)cTypeAssignment_0_2.eContents().get(0);
		private final RuleCall cTypeExprRefQualifiedNameParserRuleCall_0_2_0_1 = (RuleCall)cTypeExprRefCrossReference_0_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOutAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cOutOutputCrossReference_1_1_0 = (CrossReference)cOutAssignment_1_1.eContents().get(0);
		private final RuleCall cOutOutputIDTerminalRuleCall_1_1_0_1 = (RuleCall)cOutOutputCrossReference_1_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cListAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cListAssignListParserRuleCall_1_3_0 = (RuleCall)cListAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinexprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinexprSetExprParserRuleCall_2_1_0 = (RuleCall)cMinexprAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cLvalueAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLvalueSetExprParserRuleCall_3_0_0 = (RuleCall)cLvalueAssignment_3_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cRvalueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cRvalueSetExprParserRuleCall_3_2_0 = (RuleCall)cRvalueAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cLvalueAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLvalueIntExprParserRuleCall_4_0_0 = (RuleCall)cLvalueAssignment_4_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cRvalueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cRvalueIntExprParserRuleCall_4_2_0 = (RuleCall)cRvalueAssignment_4_2.eContents().get(0);
		
		//// involved with scoping/xtext index stuff. 
		//Action // First ID is actual name we can reference this new object with, second ID is type . in first alternative.
		////:{Action} (name=ID '=')? '+' type=[Concept] ('(' list+=AssignList ')')?
		//:
		//	{Action} '+' type=[ExprRef|QualifiedName] | '!' out=[Output] '(' list+=AssignList ')' | '-' minexpr=setExpr |
		//	lvalue=setExpr? ':=' rvalue=setExpr? | lvalue=intExpr ':=' rvalue=intExpr;
		@Override public ParserRule getRule() { return rule; }

		//{Action} '+' type=[ExprRef|QualifiedName] | '!' out=[Output] '(' list+=AssignList ')' | '-' minexpr=setExpr |
		//lvalue=setExpr? ':=' rvalue=setExpr? | lvalue=intExpr ':=' rvalue=intExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Action} '+' type=[ExprRef|QualifiedName]
		public Group getGroup_0() { return cGroup_0; }

		//{Action}
		public Action getActionAction_0_0() { return cActionAction_0_0; }

		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }

		//type=[ExprRef|QualifiedName]
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }

		//[ExprRef|QualifiedName]
		public CrossReference getTypeExprRefCrossReference_0_2_0() { return cTypeExprRefCrossReference_0_2_0; }

		//QualifiedName
		public RuleCall getTypeExprRefQualifiedNameParserRuleCall_0_2_0_1() { return cTypeExprRefQualifiedNameParserRuleCall_0_2_0_1; }

		//'!' out=[Output] '(' list+=AssignList ')'
		public Group getGroup_1() { return cGroup_1; }

		//'!'
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }

		//out=[Output]
		public Assignment getOutAssignment_1_1() { return cOutAssignment_1_1; }

		//[Output]
		public CrossReference getOutOutputCrossReference_1_1_0() { return cOutOutputCrossReference_1_1_0; }

		//ID
		public RuleCall getOutOutputIDTerminalRuleCall_1_1_0_1() { return cOutOutputIDTerminalRuleCall_1_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//list+=AssignList
		public Assignment getListAssignment_1_3() { return cListAssignment_1_3; }

		//AssignList
		public RuleCall getListAssignListParserRuleCall_1_3_0() { return cListAssignListParserRuleCall_1_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//'-' minexpr=setExpr
		public Group getGroup_2() { return cGroup_2; }

		//'-'
		public Keyword getHyphenMinusKeyword_2_0() { return cHyphenMinusKeyword_2_0; }

		//minexpr=setExpr
		public Assignment getMinexprAssignment_2_1() { return cMinexprAssignment_2_1; }

		//setExpr
		public RuleCall getMinexprSetExprParserRuleCall_2_1_0() { return cMinexprSetExprParserRuleCall_2_1_0; }

		//lvalue=setExpr? ':=' rvalue=setExpr?
		public Group getGroup_3() { return cGroup_3; }

		//lvalue=setExpr?
		public Assignment getLvalueAssignment_3_0() { return cLvalueAssignment_3_0; }

		//setExpr
		public RuleCall getLvalueSetExprParserRuleCall_3_0_0() { return cLvalueSetExprParserRuleCall_3_0_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_3_1() { return cColonEqualsSignKeyword_3_1; }

		//rvalue=setExpr?
		public Assignment getRvalueAssignment_3_2() { return cRvalueAssignment_3_2; }

		//setExpr
		public RuleCall getRvalueSetExprParserRuleCall_3_2_0() { return cRvalueSetExprParserRuleCall_3_2_0; }

		//lvalue=intExpr ':=' rvalue=intExpr
		public Group getGroup_4() { return cGroup_4; }

		//lvalue=intExpr
		public Assignment getLvalueAssignment_4_0() { return cLvalueAssignment_4_0; }

		//intExpr
		public RuleCall getLvalueIntExprParserRuleCall_4_0_0() { return cLvalueIntExprParserRuleCall_4_0_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_4_1() { return cColonEqualsSignKeyword_4_1; }

		//rvalue=intExpr
		public Assignment getRvalueAssignment_4_2() { return cRvalueAssignment_4_2; }

		//intExpr
		public RuleCall getRvalueIntExprParserRuleCall_4_2_0() { return cRvalueIntExprParserRuleCall_4_2_0; }
	}

	public class AssignListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.AssignList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListAssignParserRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListAssignParserRuleCall_1_1_0 = (RuleCall)cListAssignment_1_1.eContents().get(0);
		
		//AssignList:
		//	list+=Assign (',' list+=Assign)*;
		@Override public ParserRule getRule() { return rule; }

		//list+=Assign (',' list+=Assign)*
		public Group getGroup() { return cGroup; }

		//list+=Assign
		public Assignment getListAssignment_0() { return cListAssignment_0; }

		//Assign
		public RuleCall getListAssignParserRuleCall_0_0() { return cListAssignParserRuleCall_0_0; }

		//(',' list+=Assign)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//list+=Assign
		public Assignment getListAssignment_1_1() { return cListAssignment_1_1; }

		//Assign
		public RuleCall getListAssignParserRuleCall_1_1_0() { return cListAssignParserRuleCall_1_1_0; }
	}

	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefExprRefCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefExprRefIDTerminalRuleCall_0_0_1 = (RuleCall)cRefExprRefCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSexprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cSexprAlternatives_2_0 = (Alternatives)cSexprAssignment_2.eContents().get(0);
		private final RuleCall cSexprSetExprParserRuleCall_2_0_0 = (RuleCall)cSexprAlternatives_2_0.eContents().get(0);
		private final RuleCall cSexprIntExprParserRuleCall_2_0_1 = (RuleCall)cSexprAlternatives_2_0.eContents().get(1);
		
		//Assign:
		//	ref=[ExprRef] '=' sexpr=(setExpr | intExpr);
		@Override public ParserRule getRule() { return rule; }

		//ref=[ExprRef] '=' sexpr=(setExpr | intExpr)
		public Group getGroup() { return cGroup; }

		//ref=[ExprRef]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[ExprRef]
		public CrossReference getRefExprRefCrossReference_0_0() { return cRefExprRefCrossReference_0_0; }

		//ID
		public RuleCall getRefExprRefIDTerminalRuleCall_0_0_1() { return cRefExprRefIDTerminalRuleCall_0_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//sexpr=(setExpr | intExpr)
		public Assignment getSexprAssignment_2() { return cSexprAssignment_2; }

		//(setExpr | intExpr)
		public Alternatives getSexprAlternatives_2_0() { return cSexprAlternatives_2_0; }

		//setExpr
		public RuleCall getSexprSetExprParserRuleCall_2_0_0() { return cSexprSetExprParserRuleCall_2_0_0; }

		//intExpr
		public RuleCall getSexprIntExprParserRuleCall_2_0_1() { return cSexprIntExprParserRuleCall_2_0_1; }
	}

	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Macro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cExprAlternatives_3_0 = (Alternatives)cExprAssignment_3.eContents().get(0);
		private final RuleCall cExprSetExprParserRuleCall_3_0_0 = (RuleCall)cExprAlternatives_3_0.eContents().get(0);
		private final RuleCall cExprIntExprParserRuleCall_3_0_1 = (RuleCall)cExprAlternatives_3_0.eContents().get(1);
		
		///**
		// * Expressions
		// */ Macro:
		//	'let' name=ID '=' expr=(setExpr | intExpr);
		@Override public ParserRule getRule() { return rule; }

		//'let' name=ID '=' expr=(setExpr | intExpr)
		public Group getGroup() { return cGroup; }

		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expr=(setExpr | intExpr)
		public Assignment getExprAssignment_3() { return cExprAssignment_3; }

		//(setExpr | intExpr)
		public Alternatives getExprAlternatives_3_0() { return cExprAlternatives_3_0; }

		//setExpr
		public RuleCall getExprSetExprParserRuleCall_3_0_0() { return cExprSetExprParserRuleCall_3_0_0; }

		//intExpr
		public RuleCall getExprIntExprParserRuleCall_3_0_1() { return cExprIntExprParserRuleCall_3_0_1; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Predicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLogicopAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cLogicopAlternatives_0_0_0 = (Alternatives)cLogicopAssignment_0_0.eContents().get(0);
		private final Keyword cLogicopNoKeyword_0_0_0_0 = (Keyword)cLogicopAlternatives_0_0_0.eContents().get(0);
		private final Keyword cLogicopLoneKeyword_0_0_0_1 = (Keyword)cLogicopAlternatives_0_0_0.eContents().get(1);
		private final Keyword cLogicopOneKeyword_0_0_0_2 = (Keyword)cLogicopAlternatives_0_0_0.eContents().get(2);
		private final Keyword cLogicopSomeKeyword_0_0_0_3 = (Keyword)cLogicopAlternatives_0_0_0.eContents().get(3);
		private final Keyword cLogicopAllKeyword_0_0_0_4 = (Keyword)cLogicopAlternatives_0_0_0.eContents().get(4);
		private final Assignment cVarAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVarVariableParserRuleCall_0_1_0 = (RuleCall)cVarAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSexprAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSexprSetExprParserRuleCall_0_3_0 = (RuleCall)cSexprAssignment_0_3.eContents().get(0);
		private final Keyword cVerticalLineKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cQuantPredAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantPredNotPredParserRuleCall_1_0 = (RuleCall)cQuantPredAssignment_1.eContents().get(0);
		
		//Predicate:
		//	(logicop=('no' | 'lone' | 'one' | 'some' | 'all') var=Variable ':' sexpr=setExpr '|')? quantPred=notPred;
		@Override public ParserRule getRule() { return rule; }

		//(logicop=('no' | 'lone' | 'one' | 'some' | 'all') var=Variable ':' sexpr=setExpr '|')? quantPred=notPred
		public Group getGroup() { return cGroup; }

		//(logicop=('no' | 'lone' | 'one' | 'some' | 'all') var=Variable ':' sexpr=setExpr '|')?
		public Group getGroup_0() { return cGroup_0; }

		//logicop=('no' | 'lone' | 'one' | 'some' | 'all')
		public Assignment getLogicopAssignment_0_0() { return cLogicopAssignment_0_0; }

		//('no' | 'lone' | 'one' | 'some' | 'all')
		public Alternatives getLogicopAlternatives_0_0_0() { return cLogicopAlternatives_0_0_0; }

		//'no'
		public Keyword getLogicopNoKeyword_0_0_0_0() { return cLogicopNoKeyword_0_0_0_0; }

		//'lone'
		public Keyword getLogicopLoneKeyword_0_0_0_1() { return cLogicopLoneKeyword_0_0_0_1; }

		//'one'
		public Keyword getLogicopOneKeyword_0_0_0_2() { return cLogicopOneKeyword_0_0_0_2; }

		//'some'
		public Keyword getLogicopSomeKeyword_0_0_0_3() { return cLogicopSomeKeyword_0_0_0_3; }

		//'all'
		public Keyword getLogicopAllKeyword_0_0_0_4() { return cLogicopAllKeyword_0_0_0_4; }

		//var=Variable
		public Assignment getVarAssignment_0_1() { return cVarAssignment_0_1; }

		//Variable
		public RuleCall getVarVariableParserRuleCall_0_1_0() { return cVarVariableParserRuleCall_0_1_0; }

		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//sexpr=setExpr
		public Assignment getSexprAssignment_0_3() { return cSexprAssignment_0_3; }

		//setExpr
		public RuleCall getSexprSetExprParserRuleCall_0_3_0() { return cSexprSetExprParserRuleCall_0_3_0; }

		//'|'
		public Keyword getVerticalLineKeyword_0_4() { return cVerticalLineKeyword_0_4; }

		//quantPred=notPred
		public Assignment getQuantPredAssignment_1() { return cQuantPredAssignment_1; }

		//notPred
		public RuleCall getQuantPredNotPredParserRuleCall_1_0() { return cQuantPredNotPredParserRuleCall_1_0; }
	}

	public class NotPredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.notPred");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPredAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPredPredicateParserRuleCall_0_1_0 = (RuleCall)cPredAssignment_0_1.eContents().get(0);
		private final Assignment cPredAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPredAndPredParserRuleCall_1_0 = (RuleCall)cPredAssignment_1.eContents().get(0);
		
		//notPred:
		//	'not' pred=Predicate | pred=andPred;
		@Override public ParserRule getRule() { return rule; }

		//'not' pred=Predicate | pred=andPred
		public Alternatives getAlternatives() { return cAlternatives; }

		//'not' pred=Predicate
		public Group getGroup_0() { return cGroup_0; }

		//'not'
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }

		//pred=Predicate
		public Assignment getPredAssignment_0_1() { return cPredAssignment_0_1; }

		//Predicate
		public RuleCall getPredPredicateParserRuleCall_0_1_0() { return cPredPredicateParserRuleCall_0_1_0; }

		//pred=andPred
		public Assignment getPredAssignment_1() { return cPredAssignment_1; }

		//andPred
		public RuleCall getPredAndPredParserRuleCall_1_0() { return cPredAndPredParserRuleCall_1_0; }
	}

	public class AndPredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.andPred");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredsImpPredParserRuleCall_0_0 = (RuleCall)cPredsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPredsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPredsImpPredParserRuleCall_1_1_0 = (RuleCall)cPredsAssignment_1_1.eContents().get(0);
		
		//andPred:
		//	preds+=impPred ('and' preds+=impPred)*;
		@Override public ParserRule getRule() { return rule; }

		//preds+=impPred ('and' preds+=impPred)*
		public Group getGroup() { return cGroup; }

		//preds+=impPred
		public Assignment getPredsAssignment_0() { return cPredsAssignment_0; }

		//impPred
		public RuleCall getPredsImpPredParserRuleCall_0_0() { return cPredsImpPredParserRuleCall_0_0; }

		//('and' preds+=impPred)*
		public Group getGroup_1() { return cGroup_1; }

		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//preds+=impPred
		public Assignment getPredsAssignment_1_1() { return cPredsAssignment_1_1; }

		//impPred
		public RuleCall getPredsImpPredParserRuleCall_1_1_0() { return cPredsImpPredParserRuleCall_1_1_0; }
	}

	public class ImpPredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.impPred");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredsOrPredParserRuleCall_0_0 = (RuleCall)cPredsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLogicopAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cLogicopAlternatives_1_0_0 = (Alternatives)cLogicopAssignment_1_0.eContents().get(0);
		private final Keyword cLogicopImpliesKeyword_1_0_0_0 = (Keyword)cLogicopAlternatives_1_0_0.eContents().get(0);
		private final Keyword cLogicopIffKeyword_1_0_0_1 = (Keyword)cLogicopAlternatives_1_0_0.eContents().get(1);
		private final Assignment cPredsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPredsOrPredParserRuleCall_1_1_0 = (RuleCall)cPredsAssignment_1_1.eContents().get(0);
		
		//impPred:
		//	preds+=orPred (logicop+=('implies' | 'iff') preds+=orPred)*;
		@Override public ParserRule getRule() { return rule; }

		//preds+=orPred (logicop+=('implies' | 'iff') preds+=orPred)*
		public Group getGroup() { return cGroup; }

		//preds+=orPred
		public Assignment getPredsAssignment_0() { return cPredsAssignment_0; }

		//orPred
		public RuleCall getPredsOrPredParserRuleCall_0_0() { return cPredsOrPredParserRuleCall_0_0; }

		//(logicop+=('implies' | 'iff') preds+=orPred)*
		public Group getGroup_1() { return cGroup_1; }

		//logicop+=('implies' | 'iff')
		public Assignment getLogicopAssignment_1_0() { return cLogicopAssignment_1_0; }

		//('implies' | 'iff')
		public Alternatives getLogicopAlternatives_1_0_0() { return cLogicopAlternatives_1_0_0; }

		//'implies'
		public Keyword getLogicopImpliesKeyword_1_0_0_0() { return cLogicopImpliesKeyword_1_0_0_0; }

		//'iff'
		public Keyword getLogicopIffKeyword_1_0_0_1() { return cLogicopIffKeyword_1_0_0_1; }

		//preds+=orPred
		public Assignment getPredsAssignment_1_1() { return cPredsAssignment_1_1; }

		//orPred
		public RuleCall getPredsOrPredParserRuleCall_1_1_0() { return cPredsOrPredParserRuleCall_1_1_0; }
	}

	public class OrPredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.orPred");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredsBasePredParserRuleCall_0_0 = (RuleCall)cPredsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPredsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPredsBasePredParserRuleCall_1_1_0 = (RuleCall)cPredsAssignment_1_1.eContents().get(0);
		
		//orPred:
		//	preds+=basePred ('or' preds+=basePred)*;
		@Override public ParserRule getRule() { return rule; }

		//preds+=basePred ('or' preds+=basePred)*
		public Group getGroup() { return cGroup; }

		//preds+=basePred
		public Assignment getPredsAssignment_0() { return cPredsAssignment_0; }

		//basePred
		public RuleCall getPredsBasePredParserRuleCall_0_0() { return cPredsBasePredParserRuleCall_0_0; }

		//('or' preds+=basePred)*
		public Group getGroup_1() { return cGroup_1; }

		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//preds+=basePred
		public Assignment getPredsAssignment_1_1() { return cPredsAssignment_1_1; }

		//basePred
		public RuleCall getPredsBasePredParserRuleCall_1_1_0() { return cPredsBasePredParserRuleCall_1_1_0; }
	}

	public class BasePredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.basePred");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLogicopAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cLogicopAlternatives_0_0_0 = (Alternatives)cLogicopAssignment_0_0.eContents().get(0);
		private final Keyword cLogicopNoKeyword_0_0_0_0 = (Keyword)cLogicopAlternatives_0_0_0.eContents().get(0);
		private final Keyword cLogicopLoneKeyword_0_0_0_1 = (Keyword)cLogicopAlternatives_0_0_0.eContents().get(1);
		private final Keyword cLogicopOneKeyword_0_0_0_2 = (Keyword)cLogicopAlternatives_0_0_0.eContents().get(2);
		private final Keyword cLogicopSomeKeyword_0_0_0_3 = (Keyword)cLogicopAlternatives_0_0_0.eContents().get(3);
		private final Keyword cLogicopAllKeyword_0_0_0_4 = (Keyword)cLogicopAlternatives_0_0_0.eContents().get(4);
		private final Assignment cCardpredAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCardpredSetExprParserRuleCall_0_1_0 = (RuleCall)cCardpredAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSetlhsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSetlhsPredExprParserRuleCall_1_0_0 = (RuleCall)cSetlhsAssignment_1_0.eContents().get(0);
		private final Assignment cLogicopAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cLogicopAlternatives_1_1_0 = (Alternatives)cLogicopAssignment_1_1.eContents().get(0);
		private final Keyword cLogicopInKeyword_1_1_0_0 = (Keyword)cLogicopAlternatives_1_1_0.eContents().get(0);
		private final Keyword cLogicopEqualsSignKeyword_1_1_0_1 = (Keyword)cLogicopAlternatives_1_1_0.eContents().get(1);
		private final Assignment cSetrhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSetrhsPredExprParserRuleCall_1_2_0 = (RuleCall)cSetrhsAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cSetlhsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSetlhsPredExprParserRuleCall_2_0_0 = (RuleCall)cSetlhsAssignment_2_0.eContents().get(0);
		private final Assignment cLogicopAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cLogicopAlternatives_2_1_0 = (Alternatives)cLogicopAssignment_2_1.eContents().get(0);
		private final Keyword cLogicopInKeyword_2_1_0_0 = (Keyword)cLogicopAlternatives_2_1_0.eContents().get(0);
		private final Keyword cLogicopEqualsSignKeyword_2_1_0_1 = (Keyword)cLogicopAlternatives_2_1_0.eContents().get(1);
		private final Assignment cBoolrhsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBoolrhsBoolExprParserRuleCall_2_2_0 = (RuleCall)cBoolrhsAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cIntlhsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cIntlhsIntExprParserRuleCall_3_0_0 = (RuleCall)cIntlhsAssignment_3_0.eContents().get(0);
		private final Assignment cOpAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cOpAlternatives_3_1_0 = (Alternatives)cOpAssignment_3_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_3_1_0_0 = (Keyword)cOpAlternatives_3_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignGreaterThanSignKeyword_3_1_0_1 = (Keyword)cOpAlternatives_3_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_3_1_0_2 = (Keyword)cOpAlternatives_3_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_3_1_0_3 = (Keyword)cOpAlternatives_3_1_0.eContents().get(3);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_3_1_0_4 = (Keyword)cOpAlternatives_3_1_0.eContents().get(4);
		private final Keyword cOpEqualsSignGreaterThanSignKeyword_3_1_0_5 = (Keyword)cOpAlternatives_3_1_0.eContents().get(5);
		private final Keyword cOpLessThanSignEqualsSignKeyword_3_1_0_6 = (Keyword)cOpAlternatives_3_1_0.eContents().get(6);
		private final Keyword cOpEqualsSignLessThanSignKeyword_3_1_0_7 = (Keyword)cOpAlternatives_3_1_0.eContents().get(7);
		private final Assignment cIntrhsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cIntrhsIntExprParserRuleCall_3_2_0 = (RuleCall)cIntrhsAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParenPredAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParenPredPredicateParserRuleCall_4_1_0 = (RuleCall)cParenPredAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//basePred:
		//	logicop=('no' | 'lone' | 'one' | 'some' | 'all') cardpred=setExpr | setlhs=predExpr logicop=('in' | '=')
		//	setrhs=predExpr? | setlhs=predExpr logicop=('in' | '=') boolrhs=boolExpr | intlhs=intExpr op=('=' | '<>' | '>' | '<'
		//	| '>=' | '=>' | '<=' | '=<') intrhs=intExpr? | '(' parenPred=Predicate ')';
		@Override public ParserRule getRule() { return rule; }

		//logicop=('no' | 'lone' | 'one' | 'some' | 'all') cardpred=setExpr | setlhs=predExpr logicop=('in' | '=')
		//setrhs=predExpr? | setlhs=predExpr logicop=('in' | '=') boolrhs=boolExpr | intlhs=intExpr op=('=' | '<>' | '>' | '<' |
		//'>=' | '=>' | '<=' | '=<') intrhs=intExpr? | '(' parenPred=Predicate ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//logicop=('no' | 'lone' | 'one' | 'some' | 'all') cardpred=setExpr
		public Group getGroup_0() { return cGroup_0; }

		//logicop=('no' | 'lone' | 'one' | 'some' | 'all')
		public Assignment getLogicopAssignment_0_0() { return cLogicopAssignment_0_0; }

		//('no' | 'lone' | 'one' | 'some' | 'all')
		public Alternatives getLogicopAlternatives_0_0_0() { return cLogicopAlternatives_0_0_0; }

		//'no'
		public Keyword getLogicopNoKeyword_0_0_0_0() { return cLogicopNoKeyword_0_0_0_0; }

		//'lone'
		public Keyword getLogicopLoneKeyword_0_0_0_1() { return cLogicopLoneKeyword_0_0_0_1; }

		//'one'
		public Keyword getLogicopOneKeyword_0_0_0_2() { return cLogicopOneKeyword_0_0_0_2; }

		//'some'
		public Keyword getLogicopSomeKeyword_0_0_0_3() { return cLogicopSomeKeyword_0_0_0_3; }

		//'all'
		public Keyword getLogicopAllKeyword_0_0_0_4() { return cLogicopAllKeyword_0_0_0_4; }

		//cardpred=setExpr
		public Assignment getCardpredAssignment_0_1() { return cCardpredAssignment_0_1; }

		//setExpr
		public RuleCall getCardpredSetExprParserRuleCall_0_1_0() { return cCardpredSetExprParserRuleCall_0_1_0; }

		//setlhs=predExpr logicop=('in' | '=') setrhs=predExpr?
		public Group getGroup_1() { return cGroup_1; }

		//setlhs=predExpr
		public Assignment getSetlhsAssignment_1_0() { return cSetlhsAssignment_1_0; }

		//predExpr
		public RuleCall getSetlhsPredExprParserRuleCall_1_0_0() { return cSetlhsPredExprParserRuleCall_1_0_0; }

		//logicop=('in' | '=')
		public Assignment getLogicopAssignment_1_1() { return cLogicopAssignment_1_1; }

		//('in' | '=')
		public Alternatives getLogicopAlternatives_1_1_0() { return cLogicopAlternatives_1_1_0; }

		//'in'
		public Keyword getLogicopInKeyword_1_1_0_0() { return cLogicopInKeyword_1_1_0_0; }

		//'='
		public Keyword getLogicopEqualsSignKeyword_1_1_0_1() { return cLogicopEqualsSignKeyword_1_1_0_1; }

		//setrhs=predExpr?
		public Assignment getSetrhsAssignment_1_2() { return cSetrhsAssignment_1_2; }

		//predExpr
		public RuleCall getSetrhsPredExprParserRuleCall_1_2_0() { return cSetrhsPredExprParserRuleCall_1_2_0; }

		//setlhs=predExpr logicop=('in' | '=') boolrhs=boolExpr
		public Group getGroup_2() { return cGroup_2; }

		//setlhs=predExpr
		public Assignment getSetlhsAssignment_2_0() { return cSetlhsAssignment_2_0; }

		//predExpr
		public RuleCall getSetlhsPredExprParserRuleCall_2_0_0() { return cSetlhsPredExprParserRuleCall_2_0_0; }

		//logicop=('in' | '=')
		public Assignment getLogicopAssignment_2_1() { return cLogicopAssignment_2_1; }

		//('in' | '=')
		public Alternatives getLogicopAlternatives_2_1_0() { return cLogicopAlternatives_2_1_0; }

		//'in'
		public Keyword getLogicopInKeyword_2_1_0_0() { return cLogicopInKeyword_2_1_0_0; }

		//'='
		public Keyword getLogicopEqualsSignKeyword_2_1_0_1() { return cLogicopEqualsSignKeyword_2_1_0_1; }

		//boolrhs=boolExpr
		public Assignment getBoolrhsAssignment_2_2() { return cBoolrhsAssignment_2_2; }

		//boolExpr
		public RuleCall getBoolrhsBoolExprParserRuleCall_2_2_0() { return cBoolrhsBoolExprParserRuleCall_2_2_0; }

		//intlhs=intExpr op=('=' | '<>' | '>' | '<' | '>=' | '=>' | '<=' | '=<') intrhs=intExpr?
		public Group getGroup_3() { return cGroup_3; }

		//intlhs=intExpr
		public Assignment getIntlhsAssignment_3_0() { return cIntlhsAssignment_3_0; }

		//intExpr
		public RuleCall getIntlhsIntExprParserRuleCall_3_0_0() { return cIntlhsIntExprParserRuleCall_3_0_0; }

		//op=('=' | '<>' | '>' | '<' | '>=' | '=>' | '<=' | '=<')
		public Assignment getOpAssignment_3_1() { return cOpAssignment_3_1; }

		//('=' | '<>' | '>' | '<' | '>=' | '=>' | '<=' | '=<')
		public Alternatives getOpAlternatives_3_1_0() { return cOpAlternatives_3_1_0; }

		//'='
		public Keyword getOpEqualsSignKeyword_3_1_0_0() { return cOpEqualsSignKeyword_3_1_0_0; }

		//'<>'
		public Keyword getOpLessThanSignGreaterThanSignKeyword_3_1_0_1() { return cOpLessThanSignGreaterThanSignKeyword_3_1_0_1; }

		//'>'
		public Keyword getOpGreaterThanSignKeyword_3_1_0_2() { return cOpGreaterThanSignKeyword_3_1_0_2; }

		//'<'
		public Keyword getOpLessThanSignKeyword_3_1_0_3() { return cOpLessThanSignKeyword_3_1_0_3; }

		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_3_1_0_4() { return cOpGreaterThanSignEqualsSignKeyword_3_1_0_4; }

		//'=>'
		public Keyword getOpEqualsSignGreaterThanSignKeyword_3_1_0_5() { return cOpEqualsSignGreaterThanSignKeyword_3_1_0_5; }

		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_3_1_0_6() { return cOpLessThanSignEqualsSignKeyword_3_1_0_6; }

		//'=<'
		public Keyword getOpEqualsSignLessThanSignKeyword_3_1_0_7() { return cOpEqualsSignLessThanSignKeyword_3_1_0_7; }

		//intrhs=intExpr?
		public Assignment getIntrhsAssignment_3_2() { return cIntrhsAssignment_3_2; }

		//intExpr
		public RuleCall getIntrhsIntExprParserRuleCall_3_2_0() { return cIntrhsIntExprParserRuleCall_3_2_0; }

		//'(' parenPred=Predicate ')'
		public Group getGroup_4() { return cGroup_4; }

		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//parenPred=Predicate
		public Assignment getParenPredAssignment_4_1() { return cParenPredAssignment_4_1; }

		//Predicate
		public RuleCall getParenPredPredicateParserRuleCall_4_1_0() { return cParenPredPredicateParserRuleCall_4_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }
	}

	public class BoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.boolExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIsTrueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cIsTrueTrueKeyword_0_0 = (Keyword)cIsTrueAssignment_0.eContents().get(0);
		private final Assignment cIsFalseAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIsFalseFalseKeyword_1_0 = (Keyword)cIsFalseAssignment_1.eContents().get(0);
		
		//boolExpr:
		//	isTrue='true' | isFalse='false';
		@Override public ParserRule getRule() { return rule; }

		//isTrue='true' | isFalse='false'
		public Alternatives getAlternatives() { return cAlternatives; }

		//isTrue='true'
		public Assignment getIsTrueAssignment_0() { return cIsTrueAssignment_0; }

		//'true'
		public Keyword getIsTrueTrueKeyword_0_0() { return cIsTrueTrueKeyword_0_0; }

		//isFalse='false'
		public Assignment getIsFalseAssignment_1() { return cIsFalseAssignment_1; }

		//'false'
		public Keyword getIsFalseFalseKeyword_1_0() { return cIsFalseFalseKeyword_1_0; }
	}

	public class PredExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.predExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprPredExpr2ParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprPredExpr2ParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//predExpr:
		//	expr+=predExpr2 ('&' expr+=predExpr2)*;
		@Override public ParserRule getRule() { return rule; }

		//expr+=predExpr2 ('&' expr+=predExpr2)*
		public Group getGroup() { return cGroup; }

		//expr+=predExpr2
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//predExpr2
		public RuleCall getExprPredExpr2ParserRuleCall_0_0() { return cExprPredExpr2ParserRuleCall_0_0; }

		//('&' expr+=predExpr2)*
		public Group getGroup_1() { return cGroup_1; }

		//'&'
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }

		//expr+=predExpr2
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//predExpr2
		public RuleCall getExprPredExpr2ParserRuleCall_1_1_0() { return cExprPredExpr2ParserRuleCall_1_1_0; }
	}

	public class PredExpr2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.predExpr2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprPredExpr3ParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprPredExpr3ParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//predExpr2:
		//	expr+=predExpr3 (op+=('-' | '+') expr+=predExpr3)*;
		@Override public ParserRule getRule() { return rule; }

		//expr+=predExpr3 (op+=('-' | '+') expr+=predExpr3)*
		public Group getGroup() { return cGroup; }

		//expr+=predExpr3
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//predExpr3
		public RuleCall getExprPredExpr3ParserRuleCall_0_0() { return cExprPredExpr3ParserRuleCall_0_0; }

		//(op+=('-' | '+') expr+=predExpr3)*
		public Group getGroup_1() { return cGroup_1; }

		//op+=('-' | '+')
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//('-' | '+')
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_0_0() { return cOpHyphenMinusKeyword_1_0_0_0; }

		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1() { return cOpPlusSignKeyword_1_0_0_1; }

		//expr+=predExpr3
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//predExpr3
		public RuleCall getExprPredExpr3ParserRuleCall_1_1_0() { return cExprPredExpr3ParserRuleCall_1_1_0; }
	}

	public class PredExpr3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.predExpr3");
		private final Assignment cBaseAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBaseSetExprBaseParserRuleCall_0 = (RuleCall)cBaseAssignment.eContents().get(0);
		
		//predExpr3:
		//	base=setExprBase;
		@Override public ParserRule getRule() { return rule; }

		//base=setExprBase
		public Assignment getBaseAssignment() { return cBaseAssignment; }

		//setExprBase
		public RuleCall getBaseSetExprBaseParserRuleCall_0() { return cBaseSetExprBaseParserRuleCall_0; }
	}

	public class SetExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.setExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprSetExpr2ParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprSetExpr2ParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//setExpr:
		//	expr+=setExpr2 ('&' expr+=setExpr2)*;
		@Override public ParserRule getRule() { return rule; }

		//expr+=setExpr2 ('&' expr+=setExpr2)*
		public Group getGroup() { return cGroup; }

		//expr+=setExpr2
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//setExpr2
		public RuleCall getExprSetExpr2ParserRuleCall_0_0() { return cExprSetExpr2ParserRuleCall_0_0; }

		//('&' expr+=setExpr2)*
		public Group getGroup_1() { return cGroup_1; }

		//'&'
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }

		//expr+=setExpr2
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//setExpr2
		public RuleCall getExprSetExpr2ParserRuleCall_1_1_0() { return cExprSetExpr2ParserRuleCall_1_1_0; }
	}

	public class SetExpr2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.setExpr2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprSetExpr3ParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprSetExpr3ParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		
		//setExpr2:
		//	expr+=setExpr3 (op+=('-' | '+') expr+=setExpr3)*;
		@Override public ParserRule getRule() { return rule; }

		//expr+=setExpr3 (op+=('-' | '+') expr+=setExpr3)*
		public Group getGroup() { return cGroup; }

		//expr+=setExpr3
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//setExpr3
		public RuleCall getExprSetExpr3ParserRuleCall_0_0() { return cExprSetExpr3ParserRuleCall_0_0; }

		//(op+=('-' | '+') expr+=setExpr3)*
		public Group getGroup_1() { return cGroup_1; }

		//op+=('-' | '+')
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//('-' | '+')
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_0_0() { return cOpHyphenMinusKeyword_1_0_0_0; }

		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1() { return cOpPlusSignKeyword_1_0_0_1; }

		//expr+=setExpr3
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }

		//setExpr3
		public RuleCall getExprSetExpr3ParserRuleCall_1_1_0() { return cExprSetExpr3ParserRuleCall_1_1_0; }
	}

	public class SetExpr3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.setExpr3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cParenAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cParenSetExprBaseParserRuleCall_0_1_0 = (RuleCall)cParenAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cBaseAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBaseSetExprBaseParserRuleCall_1_0 = (RuleCall)cBaseAssignment_1.eContents().get(0);
		
		//setExpr3:
		//	'(' paren=setExprBase ')' | base=setExprBase;
		@Override public ParserRule getRule() { return rule; }

		//'(' paren=setExprBase ')' | base=setExprBase
		public Alternatives getAlternatives() { return cAlternatives; }

		//'(' paren=setExprBase ')'
		public Group getGroup_0() { return cGroup_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//paren=setExprBase
		public Assignment getParenAssignment_0_1() { return cParenAssignment_0_1; }

		//setExprBase
		public RuleCall getParenSetExprBaseParserRuleCall_0_1_0() { return cParenSetExprBaseParserRuleCall_0_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//base=setExprBase
		public Assignment getBaseAssignment_1() { return cBaseAssignment_1; }

		//setExprBase
		public RuleCall getBaseSetExprBaseParserRuleCall_1_0() { return cBaseSetExprBaseParserRuleCall_1_0; }
	}

	public class SetExprBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.setExprBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAtomAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cAtomAtomicParserRuleCall_0_0 = (RuleCall)cAtomAssignment_0.eContents().get(0);
		private final Assignment cUnspecAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnspecUnspecifiedParserRuleCall_1_0 = (RuleCall)cUnspecAssignment_1.eContents().get(0);
		
		//setExprBase:
		//	atom=atomic | unspec=unspecified;
		@Override public ParserRule getRule() { return rule; }

		//atom=atomic | unspec=unspecified
		public Alternatives getAlternatives() { return cAlternatives; }

		//atom=atomic
		public Assignment getAtomAssignment_0() { return cAtomAssignment_0; }

		//atomic
		public RuleCall getAtomAtomicParserRuleCall_0_0() { return cAtomAtomicParserRuleCall_0_0; }

		//unspec=unspecified
		public Assignment getUnspecAssignment_1() { return cUnspecAssignment_1; }

		//unspecified
		public RuleCall getUnspecUnspecifiedParserRuleCall_1_0() { return cUnspecUnspecifiedParserRuleCall_1_0; }
	}

	public class IntExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.intExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsMultExprParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsMultExprParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//intExpr:
		//	lhs=multExpr (op+=('+' | '-') rhs+=multExpr)*;
		@Override public ParserRule getRule() { return rule; }

		//lhs=multExpr (op+=('+' | '-') rhs+=multExpr)*
		public Group getGroup() { return cGroup; }

		//lhs=multExpr
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//multExpr
		public RuleCall getLhsMultExprParserRuleCall_0_0() { return cLhsMultExprParserRuleCall_0_0; }

		//(op+=('+' | '-') rhs+=multExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//op+=('+' | '-')
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//('+' | '-')
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }

		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_0() { return cOpPlusSignKeyword_1_0_0_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_0_1() { return cOpHyphenMinusKeyword_1_0_0_1; }

		//rhs+=multExpr
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//multExpr
		public RuleCall getRhsMultExprParserRuleCall_1_1_0() { return cRhsMultExprParserRuleCall_1_1_0; }
	}

	public class MultExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.multExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsIntBaseParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_0_0 = (Alternatives)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_0_0 = (Keyword)cOpAlternatives_1_0_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_0_1 = (Keyword)cOpAlternatives_1_0_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRhsIntBaseParserRuleCall_1_1_0 = (RuleCall)cRhsAssignment_1_1.eContents().get(0);
		
		//multExpr:
		//	lhs=intBase (op+=('*' | '/') rhs+=intBase)*;
		@Override public ParserRule getRule() { return rule; }

		//lhs=intBase (op+=('*' | '/') rhs+=intBase)*
		public Group getGroup() { return cGroup; }

		//lhs=intBase
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//intBase
		public RuleCall getLhsIntBaseParserRuleCall_0_0() { return cLhsIntBaseParserRuleCall_0_0; }

		//(op+=('*' | '/') rhs+=intBase)*
		public Group getGroup_1() { return cGroup_1; }

		//op+=('*' | '/')
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//('*' | '/')
		public Alternatives getOpAlternatives_1_0_0() { return cOpAlternatives_1_0_0; }

		//'*'
		public Keyword getOpAsteriskKeyword_1_0_0_0() { return cOpAsteriskKeyword_1_0_0_0; }

		//'/'
		public Keyword getOpSolidusKeyword_1_0_0_1() { return cOpSolidusKeyword_1_0_0_1; }

		//rhs+=intBase
		public Assignment getRhsAssignment_1_1() { return cRhsAssignment_1_1; }

		//intBase
		public RuleCall getRhsIntBaseParserRuleCall_1_1_0() { return cRhsIntBaseParserRuleCall_1_1_0; }
	}

	public class IntBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.intBase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAtomAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAtomAtomicParserRuleCall_0_1_0 = (RuleCall)cAtomAssignment_0_1.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumINTTerminalRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		
		//intBase:
		//	'#' atom=atomic | num=INT;
		@Override public ParserRule getRule() { return rule; }

		//'#' atom=atomic | num=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//'#' atom=atomic
		public Group getGroup_0() { return cGroup_0; }

		//'#'
		public Keyword getNumberSignKeyword_0_0() { return cNumberSignKeyword_0_0; }

		//atom=atomic
		public Assignment getAtomAssignment_0_1() { return cAtomAssignment_0_1; }

		//atomic
		public RuleCall getAtomAtomicParserRuleCall_0_1_0() { return cAtomAtomicParserRuleCall_0_1_0; }

		//num=INT
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_1_0() { return cNumINTTerminalRuleCall_1_0; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNoneAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cRefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cRefExprRefCrossReference_1_0_0 = (CrossReference)cRefAssignment_1_0.eContents().get(0);
		private final RuleCall cRefExprRefQualifiedNameParserRuleCall_1_0_0_1 = (RuleCall)cRefExprRefCrossReference_1_0_0.eContents().get(1);
		private final Keyword cPreKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cRefsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cRefsExprRefCrossReference_2_0_0 = (CrossReference)cRefsAssignment_2_0.eContents().get(0);
		private final RuleCall cRefsExprRefQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cRefsExprRefCrossReference_2_0_0.eContents().get(1);
		private final Keyword cSKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cPreKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//atomic:
		//	none='none' | ref=[ExprRef|QualifiedName] '@pre'? | refs=[ExprRef|QualifiedName] 's' '@pre'?;
		@Override public ParserRule getRule() { return rule; }

		//none='none' | ref=[ExprRef|QualifiedName] '@pre'? | refs=[ExprRef|QualifiedName] 's' '@pre'?
		public Alternatives getAlternatives() { return cAlternatives; }

		//none='none'
		public Assignment getNoneAssignment_0() { return cNoneAssignment_0; }

		//'none'
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		////TODO: Repair this portion of the rule. Currently, only ExprRef tails are permitted.
		////ref=[ExprRef] ('.' tail=[ExprRef|QualifiedName])? '@pre'? | 
		//ref=[ExprRef|QualifiedName] '@pre'?
		public Group getGroup_1() { return cGroup_1; }

		////TODO: Repair this portion of the rule. Currently, only ExprRef tails are permitted.
		////ref=[ExprRef] ('.' tail=[ExprRef|QualifiedName])? '@pre'? | 
		//ref=[ExprRef|QualifiedName]
		public Assignment getRefAssignment_1_0() { return cRefAssignment_1_0; }

		//[ExprRef|QualifiedName]
		public CrossReference getRefExprRefCrossReference_1_0_0() { return cRefExprRefCrossReference_1_0_0; }

		//QualifiedName
		public RuleCall getRefExprRefQualifiedNameParserRuleCall_1_0_0_1() { return cRefExprRefQualifiedNameParserRuleCall_1_0_0_1; }

		//'@pre'?
		public Keyword getPreKeyword_1_1() { return cPreKeyword_1_1; }

		//refs=[ExprRef|QualifiedName] 's' '@pre'?
		public Group getGroup_2() { return cGroup_2; }

		//refs=[ExprRef|QualifiedName]
		public Assignment getRefsAssignment_2_0() { return cRefsAssignment_2_0; }

		//[ExprRef|QualifiedName]
		public CrossReference getRefsExprRefCrossReference_2_0_0() { return cRefsExprRefCrossReference_2_0_0; }

		//QualifiedName
		public RuleCall getRefsExprRefQualifiedNameParserRuleCall_2_0_0_1() { return cRefsExprRefQualifiedNameParserRuleCall_2_0_0_1; }

		//'s'
		public Keyword getSKeyword_2_1() { return cSKeyword_2_1; }

		//'@pre'?
		public Keyword getPreKeyword_2_2() { return cPreKeyword_2_2; }
	}

	public class UnspecifiedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.unspecified");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefExprRefCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefExprRefIDTerminalRuleCall_0_0_1 = (RuleCall)cRefExprRefCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPreKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//unspecified:
		//	ref=[ExprRef] '()' '@pre'?;
		@Override public ParserRule getRule() { return rule; }

		//ref=[ExprRef] '()' '@pre'?
		public Group getGroup() { return cGroup; }

		//ref=[ExprRef]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[ExprRef]
		public CrossReference getRefExprRefCrossReference_0_0() { return cRefExprRefCrossReference_0_0; }

		//ID
		public RuleCall getRefExprRefIDTerminalRuleCall_0_0_1() { return cRefExprRefIDTerminalRuleCall_0_0_1; }

		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }

		//'@pre'?
		public Keyword getPreKeyword_2() { return cPreKeyword_2; }
	}

	public class SetOperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.setOper");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAmpersandKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//setOper:
		//	'+' | '-' | '&';
		@Override public ParserRule getRule() { return rule; }

		//'+' | '-' | '&'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//'&'
		public Keyword getAmpersandKeyword_2() { return cAmpersandKeyword_2; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable ExprRef:
		//	{Variable} name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{Variable} name=ID
		public Group getGroup() { return cGroup; }

		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class FragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.Fragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFragmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFragmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFragmentTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFragmentTypeFragmentTypeParserRuleCall_4_0 = (RuleCall)cFragmentTypeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///**
		// * FRAGMENTS
		// */ Fragment:
		//	{Fragment} 'fragment' name=ID '{' fragmentType+=FragmentType* '}';
		@Override public ParserRule getRule() { return rule; }

		//{Fragment} 'fragment' name=ID '{' fragmentType+=FragmentType* '}'
		public Group getGroup() { return cGroup; }

		//{Fragment}
		public Action getFragmentAction_0() { return cFragmentAction_0; }

		//'fragment'
		public Keyword getFragmentKeyword_1() { return cFragmentKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//fragmentType+=FragmentType*
		public Assignment getFragmentTypeAssignment_4() { return cFragmentTypeAssignment_4; }

		//FragmentType
		public RuleCall getFragmentTypeFragmentTypeParserRuleCall_4_0() { return cFragmentTypeFragmentTypeParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FragmentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.FragmentType");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cUnorderedGroup.eContents().get(0);
		private final Assignment cStateAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cStateStateContextParserRuleCall_0_0_0 = (RuleCall)cStateAssignment_0_0.eContents().get(0);
		private final Assignment cRegionAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cRegionRegionContextParserRuleCall_0_1_0 = (RuleCall)cRegionAssignment_0_1.eContents().get(0);
		private final Assignment cFragAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cFragTranFragmentParserRuleCall_0_2_0 = (RuleCall)cFragAssignment_0_2.eContents().get(0);
		private final Assignment cStatemachineAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cStatemachineStateMachineContextParserRuleCall_0_3_0 = (RuleCall)cStatemachineAssignment_0_3.eContents().get(0);
		private final Assignment cTransitionsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_1_0 = (RuleCall)cTransitionsAssignment_1.eContents().get(0);
		
		//FragmentType:
		//	(state=StateContext | region=RegionContext | frag=TranFragment | statemachine=StateMachineContext) &
		//	transitions+=Transition*;
		@Override public ParserRule getRule() { return rule; }

		//(state=StateContext | region=RegionContext | frag=TranFragment | statemachine=StateMachineContext) &
		//transitions+=Transition*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//(state=StateContext | region=RegionContext | frag=TranFragment | statemachine=StateMachineContext)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//state=StateContext
		public Assignment getStateAssignment_0_0() { return cStateAssignment_0_0; }

		//StateContext
		public RuleCall getStateStateContextParserRuleCall_0_0_0() { return cStateStateContextParserRuleCall_0_0_0; }

		//region=RegionContext
		public Assignment getRegionAssignment_0_1() { return cRegionAssignment_0_1; }

		//RegionContext
		public RuleCall getRegionRegionContextParserRuleCall_0_1_0() { return cRegionRegionContextParserRuleCall_0_1_0; }

		//frag=TranFragment
		public Assignment getFragAssignment_0_2() { return cFragAssignment_0_2; }

		//TranFragment
		public RuleCall getFragTranFragmentParserRuleCall_0_2_0() { return cFragTranFragmentParserRuleCall_0_2_0; }

		//statemachine=StateMachineContext
		public Assignment getStatemachineAssignment_0_3() { return cStatemachineAssignment_0_3; }

		//StateMachineContext
		public RuleCall getStatemachineStateMachineContextParserRuleCall_0_3_0() { return cStatemachineStateMachineContextParserRuleCall_0_3_0; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_1() { return cTransitionsAssignment_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_1_0() { return cTransitionsTransitionParserRuleCall_1_0; }
	}

	public class StateContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.StateContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateContextAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStateFragmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRefStateCrossReference_4_0 = (CrossReference)cRefAssignment_4.eContents().get(0);
		private final RuleCall cRefStateQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cRefStateCrossReference_4_0.eContents().get(1);
		private final Assignment cRegionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRegionsRegionParserRuleCall_5_0 = (RuleCall)cRegionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Drop newregions, reference the state and add new regions to it.
		//StateContext:
		//	{StateContext} 'StateFragment' '{' 'state' ref=[State|QualifiedName] regions+=Region* '}';
		@Override public ParserRule getRule() { return rule; }

		//{StateContext} 'StateFragment' '{' 'state' ref=[State|QualifiedName] regions+=Region* '}'
		public Group getGroup() { return cGroup; }

		//{StateContext}
		public Action getStateContextAction_0() { return cStateContextAction_0; }

		//'StateFragment'
		public Keyword getStateFragmentKeyword_1() { return cStateFragmentKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//'state'
		public Keyword getStateKeyword_3() { return cStateKeyword_3; }

		//ref=[State|QualifiedName]
		public Assignment getRefAssignment_4() { return cRefAssignment_4; }

		//[State|QualifiedName]
		public CrossReference getRefStateCrossReference_4_0() { return cRefStateCrossReference_4_0; }

		//QualifiedName
		public RuleCall getRefStateQualifiedNameParserRuleCall_4_0_1() { return cRefStateQualifiedNameParserRuleCall_4_0_1; }

		//regions+=Region*
		public Assignment getRegionsAssignment_5() { return cRegionsAssignment_5; }

		//Region
		public RuleCall getRegionsRegionParserRuleCall_5_0() { return cRegionsRegionParserRuleCall_5_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RegionContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.RegionContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegionContextAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRegionFragmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRegionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRefRegionCrossReference_4_0 = (CrossReference)cRefAssignment_4.eContents().get(0);
		private final RuleCall cRefRegionQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cRefRegionCrossReference_4_0.eContents().get(1);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Drop newstates we're referencing SM or region and we're adding to them
		//// Probably need to seperate SMs and regions to add transitions to SMs
		//RegionContext:
		//	{RegionContext} 'RegionFragment' '{' 'region' ref=[Region|QualifiedName] states+=State* '}';
		@Override public ParserRule getRule() { return rule; }

		//{RegionContext} 'RegionFragment' '{' 'region' ref=[Region|QualifiedName] states+=State* '}'
		public Group getGroup() { return cGroup; }

		//{RegionContext}
		public Action getRegionContextAction_0() { return cRegionContextAction_0; }

		//'RegionFragment'
		public Keyword getRegionFragmentKeyword_1() { return cRegionFragmentKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//'region'
		public Keyword getRegionKeyword_3() { return cRegionKeyword_3; }

		//ref=[Region|QualifiedName]
		public Assignment getRefAssignment_4() { return cRefAssignment_4; }

		//[Region|QualifiedName]
		public CrossReference getRefRegionCrossReference_4_0() { return cRefRegionCrossReference_4_0; }

		//QualifiedName
		public RuleCall getRefRegionQualifiedNameParserRuleCall_4_0_1() { return cRefRegionQualifiedNameParserRuleCall_4_0_1; }

		//states+=State*
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }

		//State
		public RuleCall getStatesStateParserRuleCall_5_0() { return cStatesStateParserRuleCall_5_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class StateMachineContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.StateMachineContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineContextAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSMFragmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStatemachineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRefAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRefStateMachineCrossReference_4_0 = (CrossReference)cRefAssignment_4.eContents().get(0);
		private final RuleCall cRefStateMachineQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cRefStateMachineCrossReference_4_0.eContents().get(1);
		private final Assignment cStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStateStateParserRuleCall_5_0 = (RuleCall)cStateAssignment_5.eContents().get(0);
		
		//StateMachineContext:
		//	{StateMachineContext} 'SMFragment' '{' 'statemachine' ref=[StateMachine|QualifiedName] state+=State*;
		@Override public ParserRule getRule() { return rule; }

		//{StateMachineContext} 'SMFragment' '{' 'statemachine' ref=[StateMachine|QualifiedName] state+=State*
		public Group getGroup() { return cGroup; }

		//{StateMachineContext}
		public Action getStateMachineContextAction_0() { return cStateMachineContextAction_0; }

		//'SMFragment'
		public Keyword getSMFragmentKeyword_1() { return cSMFragmentKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//'statemachine'
		public Keyword getStatemachineKeyword_3() { return cStatemachineKeyword_3; }

		//ref=[StateMachine|QualifiedName]
		public Assignment getRefAssignment_4() { return cRefAssignment_4; }

		//[StateMachine|QualifiedName]
		public CrossReference getRefStateMachineCrossReference_4_0() { return cRefStateMachineCrossReference_4_0; }

		//QualifiedName
		public RuleCall getRefStateMachineQualifiedNameParserRuleCall_4_0_1() { return cRefStateMachineQualifiedNameParserRuleCall_4_0_1; }

		//state+=State*
		public Assignment getStateAssignment_5() { return cStateAssignment_5; }

		//State
		public RuleCall getStateStateParserRuleCall_5_0() { return cStateStateParserRuleCall_5_0; }
	}

	public class TranFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.TranFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionFragmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefTransitionCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefTransitionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRefTransitionCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTrigAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTrigTriggerParserRuleCall_4_0 = (RuleCall)cTrigAssignment_4.eContents().get(0);
		private final Assignment cFragTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFragTypeGuardParserRuleCall_5_0 = (RuleCall)cFragTypeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSolidusKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cListAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cListWCAListParserRuleCall_6_1_0 = (RuleCall)cListAssignment_6_1.eContents().get(0);
		private final Assignment cFragListAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cFragListWCAFragmentListParserRuleCall_6_2_0 = (RuleCall)cFragListAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TranFragment:
		//	'TransitionFragment' '{' ref=[Transition|QualifiedName] ':' trig=Trigger? fragType=Guard ('/' list=WCAList?
		//	fragList=WCAFragmentList?)? '}';
		@Override public ParserRule getRule() { return rule; }

		//'TransitionFragment' '{' ref=[Transition|QualifiedName] ':' trig=Trigger? fragType=Guard ('/' list=WCAList?
		//fragList=WCAFragmentList?)? '}'
		public Group getGroup() { return cGroup; }

		//'TransitionFragment'
		public Keyword getTransitionFragmentKeyword_0() { return cTransitionFragmentKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//ref=[Transition|QualifiedName]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[Transition|QualifiedName]
		public CrossReference getRefTransitionCrossReference_2_0() { return cRefTransitionCrossReference_2_0; }

		//QualifiedName
		public RuleCall getRefTransitionQualifiedNameParserRuleCall_2_0_1() { return cRefTransitionQualifiedNameParserRuleCall_2_0_1; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//trig=Trigger?
		public Assignment getTrigAssignment_4() { return cTrigAssignment_4; }

		//Trigger
		public RuleCall getTrigTriggerParserRuleCall_4_0() { return cTrigTriggerParserRuleCall_4_0; }

		//fragType=Guard
		public Assignment getFragTypeAssignment_5() { return cFragTypeAssignment_5; }

		//Guard
		public RuleCall getFragTypeGuardParserRuleCall_5_0() { return cFragTypeGuardParserRuleCall_5_0; }

		//('/' list=WCAList? fragList=WCAFragmentList?)?
		public Group getGroup_6() { return cGroup_6; }

		//'/'
		public Keyword getSolidusKeyword_6_0() { return cSolidusKeyword_6_0; }

		//list=WCAList?
		public Assignment getListAssignment_6_1() { return cListAssignment_6_1; }

		//WCAList
		public RuleCall getListWCAListParserRuleCall_6_1_0() { return cListWCAListParserRuleCall_6_1_0; }

		//fragList=WCAFragmentList?
		public Assignment getFragListAssignment_6_2() { return cFragListAssignment_6_2; }

		//WCAFragmentList
		public RuleCall getFragListWCAFragmentListParserRuleCall_6_2_0() { return cFragListWCAFragmentListParserRuleCall_6_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class WCAFragmentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.WCAFragmentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFragAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFragWCAFragmentParserRuleCall_0_0 = (RuleCall)cFragAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFragAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFragWCAFragmentParserRuleCall_1_1_0 = (RuleCall)cFragAssignment_1_1.eContents().get(0);
		
		//WCAFragmentList:
		//	frag+=WCAFragment (',' frag+=WCAFragment)*;
		@Override public ParserRule getRule() { return rule; }

		//frag+=WCAFragment (',' frag+=WCAFragment)*
		public Group getGroup() { return cGroup; }

		//frag+=WCAFragment
		public Assignment getFragAssignment_0() { return cFragAssignment_0; }

		//WCAFragment
		public RuleCall getFragWCAFragmentParserRuleCall_0_0() { return cFragWCAFragmentParserRuleCall_0_0; }

		//(',' frag+=WCAFragment)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//frag+=WCAFragment
		public Assignment getFragAssignment_1_1() { return cFragAssignment_1_1; }

		//WCAFragment
		public RuleCall getFragWCAFragmentParserRuleCall_1_1_0() { return cFragWCAFragmentParserRuleCall_1_1_0; }
	}

	public class WCAFragmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.WCAFragment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWCAFragmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefWCACrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefWCAQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cRefWCACrossReference_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFragTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFragTypeGuardParserRuleCall_3_0 = (RuleCall)cFragTypeAssignment_3.eContents().get(0);
		
		//WCAFragment:
		//	{WCAFragment} ref=[WCA|QualifiedName] ':' fragType=Guard;
		@Override public ParserRule getRule() { return rule; }

		//{WCAFragment} ref=[WCA|QualifiedName] ':' fragType=Guard
		public Group getGroup() { return cGroup; }

		//{WCAFragment}
		public Action getWCAFragmentAction_0() { return cWCAFragmentAction_0; }

		//ref=[WCA|QualifiedName]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[WCA|QualifiedName]
		public CrossReference getRefWCACrossReference_1_0() { return cRefWCACrossReference_1_0; }

		//QualifiedName
		public RuleCall getRefWCAQualifiedNameParserRuleCall_1_0_1() { return cRefWCAQualifiedNameParserRuleCall_1_0_1; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//fragType=Guard
		public Assignment getFragTypeAssignment_3() { return cFragTypeAssignment_3; }

		//Guard
		public RuleCall getFragTypeGuardParserRuleCall_3_0() { return cFragTypeGuardParserRuleCall_3_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uw.cs.watform.forml.Forml.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////fragType=(Guard | NewClause);
		//// TODO allow for named strengthening clauses not just setexpr
		////NewClause:
		////'[' ('weaken' | 'strengthen')
		////ref=[Modifiable]? 'with' clause=setExpr ':' pred=Predicate ']';
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final SystemElements pSystem;
	private final WorldModelElements pWorldModel;
	private final ConstraintElements pConstraint;
	private final ExprRefElements pExprRef;
	private final ConceptElements pConcept;
	private final RelationshipElements pRelationship;
	private final RoleableElements pRoleable;
	private final EntityElements pEntity;
	private final AssociationElements pAssociation;
	private final AttributeElements pAttribute;
	private final AttributeTypeElements pAttributeType;
	private final StringTypeElements pStringType;
	private final FunctionElements pFunction;
	private final IntTypeElements pIntType;
	private final BoolTypeElements pBoolType;
	private final ReferenceTypeElements pReferenceType;
	private final UndefinedTypeElements pUndefinedType;
	private final MultiplicityElements pMultiplicity;
	private final CardinalityElements pCardinality;
	private final RoleElements pRole;
	private final AggregationElements pAggregation;
	private final CompositionElements pComposition;
	private final DeclElements pDecl;
	private final CompDeclElements pCompDecl;
	private final IdListElements pIdList;
	private final MessageElements pMessage;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final InputListElements pInputList;
	private final OutputListElements pOutputList;
	private final RefMessageElements pRefMessage;
	private final FeatureElements pFeature;
	private final SPLElements pSPL;
	private final XORNodeElements pXORNode;
	private final AndNodeElements pAndNode;
	private final OrNodeElements pOrNode;
	private final FeatureNodeElements pFeatureNode;
	private final EnumerationElements pEnumeration;
	private final EnumConstElements pEnumConst;
	private final BehaviourModelElements pBehaviourModel;
	private final FeatureModuleElements pFeatureModule;
	private final StateMachineElements pStateMachine;
	private final InitStateElements pInitState;
	private final StateElements pState;
	private final RegionElements pRegion;
	private final TransitionElements pTransition;
	private final PriorityElements pPriority;
	private final TransListElements pTransList;
	private final GuardElements pGuard;
	private final TriggerElements pTrigger;
	private final OverrideElements pOverride;
	private final WCEElements pWCE;
	private final WCAListElements pWCAList;
	private final WCAElements pWCA;
	private final ActionElements pAction;
	private final AssignListElements pAssignList;
	private final AssignElements pAssign;
	private final MacroElements pMacro;
	private final PredicateElements pPredicate;
	private final NotPredElements pNotPred;
	private final AndPredElements pAndPred;
	private final ImpPredElements pImpPred;
	private final OrPredElements pOrPred;
	private final BasePredElements pBasePred;
	private final BoolExprElements pBoolExpr;
	private final PredExprElements pPredExpr;
	private final PredExpr2Elements pPredExpr2;
	private final PredExpr3Elements pPredExpr3;
	private final SetExprElements pSetExpr;
	private final SetExpr2Elements pSetExpr2;
	private final SetExpr3Elements pSetExpr3;
	private final SetExprBaseElements pSetExprBase;
	private final IntExprElements pIntExpr;
	private final MultExprElements pMultExpr;
	private final IntBaseElements pIntBase;
	private final AtomicElements pAtomic;
	private final UnspecifiedElements pUnspecified;
	private final SetOperElements pSetOper;
	private final VariableElements pVariable;
	private final FragmentElements pFragment;
	private final FragmentTypeElements pFragmentType;
	private final StateContextElements pStateContext;
	private final RegionContextElements pRegionContext;
	private final StateMachineContextElements pStateMachineContext;
	private final TranFragmentElements pTranFragment;
	private final WCAFragmentListElements pWCAFragmentList;
	private final WCAFragmentElements pWCAFragment;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FormlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pWorldModel = new WorldModelElements();
		this.pConstraint = new ConstraintElements();
		this.pExprRef = new ExprRefElements();
		this.pConcept = new ConceptElements();
		this.pRelationship = new RelationshipElements();
		this.pRoleable = new RoleableElements();
		this.pEntity = new EntityElements();
		this.pAssociation = new AssociationElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pStringType = new StringTypeElements();
		this.pFunction = new FunctionElements();
		this.pIntType = new IntTypeElements();
		this.pBoolType = new BoolTypeElements();
		this.pReferenceType = new ReferenceTypeElements();
		this.pUndefinedType = new UndefinedTypeElements();
		this.pMultiplicity = new MultiplicityElements();
		this.pCardinality = new CardinalityElements();
		this.pRole = new RoleElements();
		this.pAggregation = new AggregationElements();
		this.pComposition = new CompositionElements();
		this.pDecl = new DeclElements();
		this.pCompDecl = new CompDeclElements();
		this.pIdList = new IdListElements();
		this.pMessage = new MessageElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pInputList = new InputListElements();
		this.pOutputList = new OutputListElements();
		this.pRefMessage = new RefMessageElements();
		this.pFeature = new FeatureElements();
		this.pSPL = new SPLElements();
		this.pXORNode = new XORNodeElements();
		this.pAndNode = new AndNodeElements();
		this.pOrNode = new OrNodeElements();
		this.pFeatureNode = new FeatureNodeElements();
		this.pEnumeration = new EnumerationElements();
		this.pEnumConst = new EnumConstElements();
		this.pBehaviourModel = new BehaviourModelElements();
		this.pFeatureModule = new FeatureModuleElements();
		this.pStateMachine = new StateMachineElements();
		this.pInitState = new InitStateElements();
		this.pState = new StateElements();
		this.pRegion = new RegionElements();
		this.pTransition = new TransitionElements();
		this.pPriority = new PriorityElements();
		this.pTransList = new TransListElements();
		this.pGuard = new GuardElements();
		this.pTrigger = new TriggerElements();
		this.pOverride = new OverrideElements();
		this.pWCE = new WCEElements();
		this.pWCAList = new WCAListElements();
		this.pWCA = new WCAElements();
		this.pAction = new ActionElements();
		this.pAssignList = new AssignListElements();
		this.pAssign = new AssignElements();
		this.pMacro = new MacroElements();
		this.pPredicate = new PredicateElements();
		this.pNotPred = new NotPredElements();
		this.pAndPred = new AndPredElements();
		this.pImpPred = new ImpPredElements();
		this.pOrPred = new OrPredElements();
		this.pBasePred = new BasePredElements();
		this.pBoolExpr = new BoolExprElements();
		this.pPredExpr = new PredExprElements();
		this.pPredExpr2 = new PredExpr2Elements();
		this.pPredExpr3 = new PredExpr3Elements();
		this.pSetExpr = new SetExprElements();
		this.pSetExpr2 = new SetExpr2Elements();
		this.pSetExpr3 = new SetExpr3Elements();
		this.pSetExprBase = new SetExprBaseElements();
		this.pIntExpr = new IntExprElements();
		this.pMultExpr = new MultExprElements();
		this.pIntBase = new IntBaseElements();
		this.pAtomic = new AtomicElements();
		this.pUnspecified = new UnspecifiedElements();
		this.pSetOper = new SetOperElements();
		this.pVariable = new VariableElements();
		this.pFragment = new FragmentElements();
		this.pFragmentType = new FragmentTypeElements();
		this.pStateContext = new StateContextElements();
		this.pRegionContext = new RegionContextElements();
		this.pStateMachineContext = new StateMachineContextElements();
		this.pTranFragment = new TranFragmentElements();
		this.pWCAFragmentList = new WCAFragmentListElements();
		this.pWCAFragment = new WCAFragmentElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uw.cs.watform.forml.Forml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Add ctrl for entity, composition, aggregation, attribute, and association
	//System:
	//	{System} (worldmodel=WorldModel? & behaviourmodel=BehaviourModel?);
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	///**
	// * World Model
	// */ WorldModel:
	//	{WorldModel} ('World' '{' (concepts+=Concept*
	//	constraints=Constraint?)
	//	'}');
	public WorldModelElements getWorldModelAccess() {
		return pWorldModel;
	}
	
	public ParserRule getWorldModelRule() {
		return getWorldModelAccess().getRule();
	}

	//Constraint:
	//	{Constraint} 'Constraints' '{' (predicates+=Predicate* & macro+=Macro*) '}';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//ExprRef:
	//	Concept | Attribute;
	public ExprRefElements getExprRefAccess() {
		return pExprRef;
	}
	
	public ParserRule getExprRefRule() {
		return getExprRefAccess().getRule();
	}

	//Concept ExprRef:
	//	Entity | Relationship | SPL | Message | Feature | Enumeration | UndefinedType;
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}

	//Relationship Concept:
	//	Association | Aggregation | Composition;
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//Roleable Concept:
	//	Entity | Feature;
	public RoleableElements getRoleableAccess() {
		return pRoleable;
	}
	
	public ParserRule getRoleableRule() {
		return getRoleableAccess().getRule();
	}

	//Entity Roleable:
	//	{Entity} 'abstract'? ctrl?='ctrl'? 'entity' name=ID ('extends' superType=[Entity])? ('{' attributes+=Attribute*
	//	functions+=Function* '}')?;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Association Relationship:
	//	{Association} ctrl?='ctrl'? 'association' name=ID '{' (attributes+=Attribute* & (srcRole=Role & desRole=Role)) '}';
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}

	//Attribute ExprRef:
	//	{Attribute} ctrl?='ctrl'? 'attribute' name=ID ('[' multiplicity=Multiplicity ']')? ':' type=AttributeType?;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//AttributeType:
	//	ReferenceType | IntType | BoolType | StringType | UndefinedType;
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//StringType:
	//	{StringType} "string" | "String";
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//Function ExprRef:
	//	{Function} 'function' name=ID ':' type=AttributeType?;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//IntType:
	//	{IntType} "int" | "Integer";
	public IntTypeElements getIntTypeAccess() {
		return pIntType;
	}
	
	public ParserRule getIntTypeRule() {
		return getIntTypeAccess().getRule();
	}

	//BoolType:
	//	{BoolType} "bool" | "Boolean";
	public BoolTypeElements getBoolTypeAccess() {
		return pBoolType;
	}
	
	public ParserRule getBoolTypeRule() {
		return getBoolTypeAccess().getRule();
	}

	//ReferenceType:
	//	ref=[Concept];
	public ReferenceTypeElements getReferenceTypeAccess() {
		return pReferenceType;
	}
	
	public ParserRule getReferenceTypeRule() {
		return getReferenceTypeAccess().getRule();
	}

	//UndefinedType Concept:
	//	{UndefinedType} 'undefined_type' name=ID;
	public UndefinedTypeElements getUndefinedTypeAccess() {
		return pUndefinedType;
	}
	
	public ParserRule getUndefinedTypeRule() {
		return getUndefinedTypeAccess().getRule();
	}

	//Multiplicity:
	//	(value=INT | many='*') | cardinality=Cardinality;
	public MultiplicityElements getMultiplicityAccess() {
		return pMultiplicity;
	}
	
	public ParserRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}

	//Cardinality:
	//	lower=INT '..' (upper=INT | many='*');
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	///*
	// * Role needs to be Entity, or Feature
	// * Future work in order to support multiple SPLs make SPL also a role
	// */ // TODO FUTUREWORK: Allow for SPLs to be roleable
	//Role:
	//	'role' {Role} name=ID ('[' multiplicity=Multiplicity ']')? ':' type=[Roleable];
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//Aggregation Relationship:
	//	{Aggregation} ctrl?='ctrl'? 'aggregation' name=ID '{' ('whole' whole=Decl & 'part' part=Decl) '}';
	public AggregationElements getAggregationAccess() {
		return pAggregation;
	}
	
	public ParserRule getAggregationRule() {
		return getAggregationAccess().getRule();
	}

	//Composition Relationship:
	//	{Composition} ctrl?='ctrl'? 'composition' name=ID '{' ('whole' whole=Decl & 'part' part=Decl) '}';
	public CompositionElements getCompositionAccess() {
		return pComposition;
	}
	
	public ParserRule getCompositionRule() {
		return getCompositionAccess().getRule();
	}

	//Decl:
	//	{Decl} name=ID ('[' multiplicity=Multiplicity ']')? ':' type=[Entity];
	public DeclElements getDeclAccess() {
		return pDecl;
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//CompDecl Decl:
	//	{CompDecl} name=ID ':' type=[Entity];
	public CompDeclElements getCompDeclAccess() {
		return pCompDecl;
	}
	
	public ParserRule getCompDeclRule() {
		return getCompDeclAccess().getRule();
	}

	//IdList:
	//	ID (',' ID)*;
	public IdListElements getIdListAccess() {
		return pIdList;
	}
	
	public ParserRule getIdListRule() {
		return getIdListAccess().getRule();
	}

	///*
	// * FUTUREWORK: IO messages for multiple SPLs
	// */ Message Concept:
	//	Input | Output;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	//Input Message:
	//	{Input} 'input' name=ID '{' ('type' type=AttributeType)? attributes+=Attribute* ('to' tos+=[Feature]*)? '}';
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Output Message:
	//	{Output} 'output' name=ID '{' ('type' type=AttributeType)? attributes+=Attribute* ('from' froms+=[Feature]*)? '}';
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}

	//InputList:
	//	{InputList} 'inputs' '{' (inputs+=RefMessage (',' inputs+=RefMessage)*)? '}';
	public InputListElements getInputListAccess() {
		return pInputList;
	}
	
	public ParserRule getInputListRule() {
		return getInputListAccess().getRule();
	}

	//OutputList:
	//	{OutputList} 'outputs' '{' (outputs+=RefMessage (',' outputs+=RefMessage)*)? '}';
	public OutputListElements getOutputListAccess() {
		return pOutputList;
	}
	
	public ParserRule getOutputListRule() {
		return getOutputListAccess().getRule();
	}

	//RefMessage:
	//	{RefMessage} refMsg=[Message];
	public RefMessageElements getRefMessageAccess() {
		return pRefMessage;
	}
	
	public ParserRule getRefMessageRule() {
		return getRefMessageAccess().getRule();
	}

	///*
	// * Add input and output lists for messages
	// * FUTUREWORK: Third messsage list for IO
	// */ Feature Roleable:
	//	{Feature} 'feature' name=ID ('{' (attributes+=Attribute* inputlist=InputList? outputlist=OutputList?) '}')?;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//SPL Node:
	//	{SPL} 'SPL' name=ID '{' (featureNodes+=FeatureNode* xors+=XORNode* ands+=AndNode* ors+=OrNode*) '}';
	public SPLElements getSPLAccess() {
		return pSPL;
	}
	
	public ParserRule getSPLRule() {
		return getSPLAccess().getRule();
	}

	//XORNode Node:
	//	{XORNode} 'XOR' '{' featureNodes+=FeatureNode featureNodes+=FeatureNode+ '}';
	public XORNodeElements getXORNodeAccess() {
		return pXORNode;
	}
	
	public ParserRule getXORNodeRule() {
		return getXORNodeAccess().getRule();
	}

	//AndNode Node:
	//	{AndNode} 'AND' '{' featureNodes+=FeatureNode featureNodes+=FeatureNode+ '}';
	public AndNodeElements getAndNodeAccess() {
		return pAndNode;
	}
	
	public ParserRule getAndNodeRule() {
		return getAndNodeAccess().getRule();
	}

	//OrNode Node:
	//	{OrNode} 'OR' '{' featureNodes+=FeatureNode featureNodes+=FeatureNode+ '}';
	public OrNodeElements getOrNodeAccess() {
		return pOrNode;
	}
	
	public ParserRule getOrNodeRule() {
		return getOrNodeAccess().getRule();
	}

	//// TODO: Featurnodes need multiplicity, unless inside a binary operator node.
	//// TODO: Try to force indentation for them
	//FeatureNode Node:
	//	{FeatureNode} 'FeatureNode' feature=[Feature] ('[' multiplicity=Multiplicity ']')? ('{' (featureNodes+=FeatureNode*
	//	xors+=XORNode* ands+=AndNode* ors+=OrNode*) '}')?;
	public FeatureNodeElements getFeatureNodeAccess() {
		return pFeatureNode;
	}
	
	public ParserRule getFeatureNodeRule() {
		return getFeatureNodeAccess().getRule();
	}

	//Enumeration Concept:
	//	{Enumeration} 'enum' name=ID '{' (constant+=EnumConst (',' constant+=EnumConst)*) '}';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}

	//EnumConst ExprRef:
	//	{EnumConst} name=ID;
	public EnumConstElements getEnumConstAccess() {
		return pEnumConst;
	}
	
	public ParserRule getEnumConstRule() {
		return getEnumConstAccess().getRule();
	}

	///**
	// * Behaviour Model
	// */ BehaviourModel:
	//	{BehaviourModel} 'Behaviour' '{' featuremodules+=FeatureModule* '}';
	public BehaviourModelElements getBehaviourModelAccess() {
		return pBehaviourModel;
	}
	
	public ParserRule getBehaviourModelRule() {
		return getBehaviourModelAccess().getRule();
	}

	//FeatureModule:
	//	'FeatureModule' featureref=[Roleable] '{' (constraints=Constraint? & statemachine+=StateMachine* &
	//	fragments+=Fragment*) '}';
	public FeatureModuleElements getFeatureModuleAccess() {
		return pFeatureModule;
	}
	
	public ParserRule getFeatureModuleRule() {
		return getFeatureModuleAccess().getRule();
	}

	//StateMachine:
	//	'statemachine' name=ID '{' (regions+=Region+ & transitions+=Transition*) '}';
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}

	//InitState:
	//	{InitState} 'init' '=' stateref=[State]?;
	public InitStateElements getInitStateAccess() {
		return pInitState;
	}
	
	public ParserRule getInitStateRule() {
		return getInitStateAccess().getRule();
	}

	//State Component:
	//	{State} 'state' name=ID '{' regions+=Region* '}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Region Component:
	//	{Region} 'region' name=ID '{' init=InitState? states+=State* '}';
	public RegionElements getRegionAccess() {
		return pRegion;
	}
	
	public ParserRule getRegionRule() {
		return getRegionAccess().getRule();
	}

	//Transition:
	//	{Transition} 'transition' name=ID priority=Priority? ':' src=[State|QualifiedName] '->' dst=[State|QualifiedName] '{'
	//	trig=Trigger? guard=Guard? list=WCAList? '}';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//// This should be list of transitions - it has priority over all of those
	//Priority:
	//	'>' translist=TransList;
	public PriorityElements getPriorityAccess() {
		return pPriority;
	}
	
	public ParserRule getPriorityRule() {
		return getPriorityAccess().getRule();
	}

	//TransList:
	//	transitions+=[Transition] (',' transitions+=[Transition])*;
	public TransListElements getTransListAccess() {
		return pTransList;
	}
	
	public ParserRule getTransListRule() {
		return getTransListAccess().getRule();
	}

	//Guard:
	//	{Guard} ('[' predicate=Predicate? ']' | '[]');
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//// When/After is timing requirements delete/comment for later.
	//// TODO: FUTURE timing requirements.
	//Trigger:
	//	{Trigger} 'event:' (override=Override | wce=WCE)?
	//	/*| 'when' ID
	//	| 'after' ID)*/;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//Override:
	//	'override' '(' transition=[Transition] ')';
	public OverrideElements getOverrideAccess() {
		return pOverride;
	}
	
	public ParserRule getOverrideRule() {
		return getOverrideAccess().getRule();
	}

	//// Can also have minus for removing concept
	//// and a ~ as well for when an attribute changes. (this is the dot accessing)
	//// Might need input?.
	//WCE:
	//	addobj=[ExprRef|QualifiedName] '+' | attr=[Attribute|QualifiedName] | remobj=[ExprRef|QualifiedName] '-';
	public WCEElements getWCEAccess() {
		return pWCE;
	}
	
	public ParserRule getWCERule() {
		return getWCEAccess().getRule();
	}

	//WCAList:
	//	{WCAList} '/' (actions+=WCA (',' actions+=WCA)*)?;
	public WCAListElements getWCAListAccess() {
		return pWCAList;
	}
	
	public ParserRule getWCAListRule() {
		return getWCAListAccess().getRule();
	}

	//WCA:
	//	{WCA} name=ID '{' action=Action?
	//	//override=Override?
	//	//guard=Guard? |
	//	'}';
	public WCAElements getWCAAccess() {
		return pWCA;
	}
	
	public ParserRule getWCARule() {
		return getWCAAccess().getRule();
	}

	//// involved with scoping/xtext index stuff. 
	//Action // First ID is actual name we can reference this new object with, second ID is type . in first alternative.
	////:{Action} (name=ID '=')? '+' type=[Concept] ('(' list+=AssignList ')')?
	//:
	//	{Action} '+' type=[ExprRef|QualifiedName] | '!' out=[Output] '(' list+=AssignList ')' | '-' minexpr=setExpr |
	//	lvalue=setExpr? ':=' rvalue=setExpr? | lvalue=intExpr ':=' rvalue=intExpr;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//AssignList:
	//	list+=Assign (',' list+=Assign)*;
	public AssignListElements getAssignListAccess() {
		return pAssignList;
	}
	
	public ParserRule getAssignListRule() {
		return getAssignListAccess().getRule();
	}

	//Assign:
	//	ref=[ExprRef] '=' sexpr=(setExpr | intExpr);
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}

	///**
	// * Expressions
	// */ Macro:
	//	'let' name=ID '=' expr=(setExpr | intExpr);
	public MacroElements getMacroAccess() {
		return pMacro;
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}

	//Predicate:
	//	(logicop=('no' | 'lone' | 'one' | 'some' | 'all') var=Variable ':' sexpr=setExpr '|')? quantPred=notPred;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	//notPred:
	//	'not' pred=Predicate | pred=andPred;
	public NotPredElements getNotPredAccess() {
		return pNotPred;
	}
	
	public ParserRule getNotPredRule() {
		return getNotPredAccess().getRule();
	}

	//andPred:
	//	preds+=impPred ('and' preds+=impPred)*;
	public AndPredElements getAndPredAccess() {
		return pAndPred;
	}
	
	public ParserRule getAndPredRule() {
		return getAndPredAccess().getRule();
	}

	//impPred:
	//	preds+=orPred (logicop+=('implies' | 'iff') preds+=orPred)*;
	public ImpPredElements getImpPredAccess() {
		return pImpPred;
	}
	
	public ParserRule getImpPredRule() {
		return getImpPredAccess().getRule();
	}

	//orPred:
	//	preds+=basePred ('or' preds+=basePred)*;
	public OrPredElements getOrPredAccess() {
		return pOrPred;
	}
	
	public ParserRule getOrPredRule() {
		return getOrPredAccess().getRule();
	}

	//basePred:
	//	logicop=('no' | 'lone' | 'one' | 'some' | 'all') cardpred=setExpr | setlhs=predExpr logicop=('in' | '=')
	//	setrhs=predExpr? | setlhs=predExpr logicop=('in' | '=') boolrhs=boolExpr | intlhs=intExpr op=('=' | '<>' | '>' | '<'
	//	| '>=' | '=>' | '<=' | '=<') intrhs=intExpr? | '(' parenPred=Predicate ')';
	public BasePredElements getBasePredAccess() {
		return pBasePred;
	}
	
	public ParserRule getBasePredRule() {
		return getBasePredAccess().getRule();
	}

	//boolExpr:
	//	isTrue='true' | isFalse='false';
	public BoolExprElements getBoolExprAccess() {
		return pBoolExpr;
	}
	
	public ParserRule getBoolExprRule() {
		return getBoolExprAccess().getRule();
	}

	//predExpr:
	//	expr+=predExpr2 ('&' expr+=predExpr2)*;
	public PredExprElements getPredExprAccess() {
		return pPredExpr;
	}
	
	public ParserRule getPredExprRule() {
		return getPredExprAccess().getRule();
	}

	//predExpr2:
	//	expr+=predExpr3 (op+=('-' | '+') expr+=predExpr3)*;
	public PredExpr2Elements getPredExpr2Access() {
		return pPredExpr2;
	}
	
	public ParserRule getPredExpr2Rule() {
		return getPredExpr2Access().getRule();
	}

	//predExpr3:
	//	base=setExprBase;
	public PredExpr3Elements getPredExpr3Access() {
		return pPredExpr3;
	}
	
	public ParserRule getPredExpr3Rule() {
		return getPredExpr3Access().getRule();
	}

	//setExpr:
	//	expr+=setExpr2 ('&' expr+=setExpr2)*;
	public SetExprElements getSetExprAccess() {
		return pSetExpr;
	}
	
	public ParserRule getSetExprRule() {
		return getSetExprAccess().getRule();
	}

	//setExpr2:
	//	expr+=setExpr3 (op+=('-' | '+') expr+=setExpr3)*;
	public SetExpr2Elements getSetExpr2Access() {
		return pSetExpr2;
	}
	
	public ParserRule getSetExpr2Rule() {
		return getSetExpr2Access().getRule();
	}

	//setExpr3:
	//	'(' paren=setExprBase ')' | base=setExprBase;
	public SetExpr3Elements getSetExpr3Access() {
		return pSetExpr3;
	}
	
	public ParserRule getSetExpr3Rule() {
		return getSetExpr3Access().getRule();
	}

	//setExprBase:
	//	atom=atomic | unspec=unspecified;
	public SetExprBaseElements getSetExprBaseAccess() {
		return pSetExprBase;
	}
	
	public ParserRule getSetExprBaseRule() {
		return getSetExprBaseAccess().getRule();
	}

	//intExpr:
	//	lhs=multExpr (op+=('+' | '-') rhs+=multExpr)*;
	public IntExprElements getIntExprAccess() {
		return pIntExpr;
	}
	
	public ParserRule getIntExprRule() {
		return getIntExprAccess().getRule();
	}

	//multExpr:
	//	lhs=intBase (op+=('*' | '/') rhs+=intBase)*;
	public MultExprElements getMultExprAccess() {
		return pMultExpr;
	}
	
	public ParserRule getMultExprRule() {
		return getMultExprAccess().getRule();
	}

	//intBase:
	//	'#' atom=atomic | num=INT;
	public IntBaseElements getIntBaseAccess() {
		return pIntBase;
	}
	
	public ParserRule getIntBaseRule() {
		return getIntBaseAccess().getRule();
	}

	//atomic:
	//	none='none' | ref=[ExprRef|QualifiedName] '@pre'? | refs=[ExprRef|QualifiedName] 's' '@pre'?;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//unspecified:
	//	ref=[ExprRef] '()' '@pre'?;
	public UnspecifiedElements getUnspecifiedAccess() {
		return pUnspecified;
	}
	
	public ParserRule getUnspecifiedRule() {
		return getUnspecifiedAccess().getRule();
	}

	//setOper:
	//	'+' | '-' | '&';
	public SetOperElements getSetOperAccess() {
		return pSetOper;
	}
	
	public ParserRule getSetOperRule() {
		return getSetOperAccess().getRule();
	}

	//Variable ExprRef:
	//	{Variable} name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	///**
	// * FRAGMENTS
	// */ Fragment:
	//	{Fragment} 'fragment' name=ID '{' fragmentType+=FragmentType* '}';
	public FragmentElements getFragmentAccess() {
		return pFragment;
	}
	
	public ParserRule getFragmentRule() {
		return getFragmentAccess().getRule();
	}

	//FragmentType:
	//	(state=StateContext | region=RegionContext | frag=TranFragment | statemachine=StateMachineContext) &
	//	transitions+=Transition*;
	public FragmentTypeElements getFragmentTypeAccess() {
		return pFragmentType;
	}
	
	public ParserRule getFragmentTypeRule() {
		return getFragmentTypeAccess().getRule();
	}

	//// Drop newregions, reference the state and add new regions to it.
	//StateContext:
	//	{StateContext} 'StateFragment' '{' 'state' ref=[State|QualifiedName] regions+=Region* '}';
	public StateContextElements getStateContextAccess() {
		return pStateContext;
	}
	
	public ParserRule getStateContextRule() {
		return getStateContextAccess().getRule();
	}

	//// Drop newstates we're referencing SM or region and we're adding to them
	//// Probably need to seperate SMs and regions to add transitions to SMs
	//RegionContext:
	//	{RegionContext} 'RegionFragment' '{' 'region' ref=[Region|QualifiedName] states+=State* '}';
	public RegionContextElements getRegionContextAccess() {
		return pRegionContext;
	}
	
	public ParserRule getRegionContextRule() {
		return getRegionContextAccess().getRule();
	}

	//StateMachineContext:
	//	{StateMachineContext} 'SMFragment' '{' 'statemachine' ref=[StateMachine|QualifiedName] state+=State*;
	public StateMachineContextElements getStateMachineContextAccess() {
		return pStateMachineContext;
	}
	
	public ParserRule getStateMachineContextRule() {
		return getStateMachineContextAccess().getRule();
	}

	//TranFragment:
	//	'TransitionFragment' '{' ref=[Transition|QualifiedName] ':' trig=Trigger? fragType=Guard ('/' list=WCAList?
	//	fragList=WCAFragmentList?)? '}';
	public TranFragmentElements getTranFragmentAccess() {
		return pTranFragment;
	}
	
	public ParserRule getTranFragmentRule() {
		return getTranFragmentAccess().getRule();
	}

	//WCAFragmentList:
	//	frag+=WCAFragment (',' frag+=WCAFragment)*;
	public WCAFragmentListElements getWCAFragmentListAccess() {
		return pWCAFragmentList;
	}
	
	public ParserRule getWCAFragmentListRule() {
		return getWCAFragmentListAccess().getRule();
	}

	//WCAFragment:
	//	{WCAFragment} ref=[WCA|QualifiedName] ':' fragType=Guard;
	public WCAFragmentElements getWCAFragmentAccess() {
		return pWCAFragment;
	}
	
	public ParserRule getWCAFragmentRule() {
		return getWCAFragmentAccess().getRule();
	}

	////fragType=(Guard | NewClause);
	//// TODO allow for named strengthening clauses not just setexpr
	////NewClause:
	////'[' ('weaken' | 'strengthen')
	////ref=[Modifiable]? 'with' clause=setExpr ':' pred=Predicate ']';
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
