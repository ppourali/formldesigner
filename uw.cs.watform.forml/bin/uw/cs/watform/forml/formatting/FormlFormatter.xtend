/*
 * generated by Xtext
 */
package uw.cs.watform.forml.formatting

import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import uw.cs.watform.forml.services.FormlGrammarAccess
import uw.cs.watform.forml.services.FormlGrammarAccess.MacroElements
import javax.swing.JOptionPane
import org.eclipse.xtext.Keyword
import uw.cs.watform.forml.forml.WCAList

// import com.google.inject.Inject;
// import uw.cs.watform.forml.services.FormlGrammarAccess
/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class FormlFormatter extends customFormlFormatter {

//	@Inject extension FormlGrammarAccess
	FormlGrammarAccess f;

	override protected void configureFormatting(FormattingConfig c) {

		f = FormlGrammarAccess.cast(getGrammarAccess());

		// set a maximum size of lines
		c.setAutoLinewrap(500);

// set a line wrap before each feature rule 
		c.setLinewrap().before(f.getRoleableRule());
		// set a line wrap after each feature rule 
		c.setLinewrap().after(f.getRoleableRule());
		
		// set a line wrap before each relation rule 
		c.setLinewrap().before(f.getRelationshipRule());
		// set a line wrap after each relation rule 
		c.setLinewrap().after(f.getRelationshipRule());

		// set no space around all parentheses
		for (org.eclipse.xtext.util.Pair<Keyword, Keyword> p : f.findKeywordPairs("(", ")")) {
			c.setNoSpace().around(p.getFirst());
			c.setNoSpace().around(p.getSecond());
		}

		// set no space before all commas
		for (Keyword comma : f.findKeywords(",")) {
			c.setNoSpace().before(comma);
		}

		// set indentation inside all curly brackets 
		// set line wrap after each left curly bracket
		// set line wrap around each right curly bracket
		for (org.eclipse.xtext.util.Pair<Keyword, Keyword> p : f.findKeywordPairs("{", "}")) {

			// if (!((p.first.equals(f.WCAAccess.leftCurlyBracketKeyword_2) &&
			// p.second.equals(f.WCAAccess.rightCurlyBracketKeyword_6))||(p.first.equals(f.transitionAccess.leftCurlyBracketKeyword_8) &&
			// p.second.equals(f.transitionAccess.rightCurlyBracketKeyword_12)))) {
			if (!(p.first.equals(f.WCAAccess.leftCurlyBracketKeyword_2) &&
				p.second.equals(f.WCAAccess.rightCurlyBracketKeyword_4))) {
				c.setIndentationIncrement().after(p.getFirst());
				c.setIndentationDecrement().before(p.getSecond());
				c.setLinewrap().after(p.getFirst());
				c.setLinewrap().around(p.getSecond());
			}
		}

// set a line wrap before each feature Module rule 
		c.setLinewrap().before(f.getFeatureModuleRule()); // set a line wrap after each featureModule rule 
		c.setLinewrap().after(f.getFeatureModuleRule());

		// set a line wrap before each feature Module rule 
		c.setLinewrap().before(f.regionRule);
		// set a line wrap after each featureModule rule 
		c.setLinewrap().after(f.getRegionRule());

	}

/* OLD
 * 		f = FormlGrammarAccess.cast(getGrammarAccess());

 * 		

 * 		// set a line wrap before each feature rule 
 * 		c.setLinewrap().before(f.getFeatureRule());
 * 		// set a line wrap after each feature rule 
 * 		c.setLinewrap().after(f.getFeatureRule());

 * 		// set a line wrap before each entity rule 
 * 		c.setLinewrap().before(f.getEntityRule());
 * 		// set a line wrap after each entity rule 
 * 		c.setLinewrap().after(f.getEntityRule());

 * 		// set a line wrap before each feature Module rule 
 * 		c.setLinewrap().before(f.getFeatureModuleRule());
 * 		// set a line wrap after each featureModule rule 
 * 		c.setLinewrap().after(f.getFeatureModuleRule());

 * 		// set a line wrap before each constraint rule 
 * 		c.setLinewrap().before(f.getConstraintRule());
 * 		// set a line wrap after each constraint rule 
 * 		c.setLinewrap().after(f.getConstraintRule());

 * 		// set a line wrap before each predicate and macro rules 
 * 		// c.setLinewrap().before(f.getPredicateRule());
 * 		c.setLinewrap().before(f.getMacroRule());
 * 		// set a line wrap after each predicate and macro rules 
 * 		// c.setLinewrap().after(f.getPredicateRule());
 * 		c.setLinewrap().after(f.getMacroRule());

 * 		// set a line wrap before each Behaviour rule 
 * 		c.setLinewrap(2).before(f.getBehaviourModelRule());
 * 		// set a line wrap after each Behaviour rule 
 * 		c.setLinewrap().after(f.getBehaviourModelRule());

 * 		// set a line wrap before each transition rule 
 * 		c.setLinewrap().before(f.getTransitionRule());
 * 		// set a line wrap after each transition rule 
 * 		c.setLinewrap().after(f.getTransitionRule());

 * 		// set a line wrap before each Message rule 
 * 		c.setLinewrap().before(f.inputRule);
 * 		c.setLinewrap().before(f.outputRule);
 * 		// set a line wrap after each Message rule 
 * 		c.setLinewrap().after(f.inputRule);
 * 		c.setLinewrap().after(f.outputRule);
 */
}
